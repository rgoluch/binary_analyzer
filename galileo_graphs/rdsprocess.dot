digraph code {
	graph [bgcolor=azure fontsize=8 fontname="Courier" splines="ortho"];
	node [fillcolor=gray style=filled shape=box];
	edge [arrowhead="normal"];
	"0x0010a8d8" [URL="sym.rdsprocess/0x0010a8d8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="  ; DATA XREF from sym.rdsinit @ 0x10a59d\l1133: sym.rdsprocess (int32_t arg_8h);\l; var int32_t var_4c0h @ ebp-0x4c0\l; var int32_t var_4beh @ ebp-0x4be\l; var int32_t var_480h @ ebp-0x480\l; var int32_t var_274h @ ebp-0x274\l; var int32_t var_272h @ ebp-0x272\l; var int32_t var_270h @ ebp-0x270\l; var int32_t var_234h @ ebp-0x234\l; var int32_t var_22ch @ ebp-0x22c\l; var int32_t var_28h @ ebp-0x28\l; var int32_t var_24h @ ebp-0x24\l; var int32_t var_20h @ ebp-0x20\l; var int32_t var_1ch @ ebp-0x1c\l; var int32_t var_18h @ ebp-0x18\l; var int32_t var_14h @ ebp-0x14\l; var int32_t var_10h @ ebp-0x10\l; var int32_t var_ch @ ebp-0xc\l; arg int32_t arg_8h @ ebp+0x8\l; var int32_t var_4e8h @ esp+0x4\l; var int32_t var_4e4h @ esp+0x8\l; var int32_t var_4e0h @ esp+0xc\l; var int32_t var_4dch @ esp+0x10\l0x0010a8d8      push ebp\l0x0010a8d9      mov ebp, esp\l0x0010a8db      sub esp, 0x4e8\l"]
	"0x0010a8e1" [URL="sym.rdsprocess/0x0010a8e1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from sym.rdsprocess @ 0x10a915, 0x10ad40\l0x0010a8e1      mov eax, dword [arg_8h]\l0x0010a8e4      mov eax, dword [eax + 0x78]\l0x0010a8e7      mov dword [esp], eax\l0x0010a8ea      call sym.wait                                          ; pid_t wait(int *wstatus)\l0x0010a8ef      mov eax, dword [arg_8h]\l0x0010a8f2      mov eax, dword [eax + 0x48]\l0x0010a8f5      mov dword [var_1ch], eax\l0x0010a8f8      mov eax, dword [var_1ch]\l0x0010a8fb      mov eax, dword [eax + 8]\l0x0010a8fe      cmp eax, 2                                             ; 2\l0x0010a901      je 0x10ab55\l"]
	"0x0010a907" [URL="sym.rdsprocess/0x0010a907", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010a907      cmp eax, 3                                             ; 3\l0x0010a90a      je 0x10ace0\l"]
	"0x0010a910" [URL="sym.rdsprocess/0x0010a910", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010a910      cmp eax, 1                                             ; 1\l0x0010a913      je 0x10a917\l"]
	"0x0010a915" [URL="sym.rdsprocess/0x0010a915", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010a915      jmp 0x10a8e1\l"]
	"0x0010a917" [URL="sym.rdsprocess/0x0010a917", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rdsprocess @ 0x10a913\l0x0010a917      mov word [var_274h], 0x1000\l0x0010a920      mov word [var_272h], 0\l0x0010a929      mov dword [var_270h], 0\l0x0010a933      lea eax, [var_274h]\l0x0010a939      add eax, 8\l0x0010a93c      mov dword [var_ch], eax\l0x0010a93f      mov dword [var_4e4h], 0x40                             ; '@'\l                                                                       ; [0x40:4]=-1 ; 64\l0x0010a947      mov dword [var_4e8h], 0\l0x0010a94f      mov eax, dword [var_ch]\l0x0010a952      mov dword [esp], eax\l0x0010a955      call sym.memset                                        ; void *memset(void *s, int c, size_t n)\l0x0010a95a      mov eax, dword [arg_8h]\l0x0010a95d      add eax, 4\l0x0010a960      mov dword [var_10h], eax\l0x0010a963      nop\l"]
	"0x0010a964" [URL="sym.rdsprocess/0x0010a964", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rdsprocess @ 0x10a97e\l0x0010a964      mov eax, dword [var_ch]\l0x0010a967      lea edx, [eax + 1]\l0x0010a96a      mov dword [var_ch], edx\l0x0010a96d      mov edx, dword [var_10h]\l0x0010a970      lea ecx, [edx + 1]\l0x0010a973      mov dword [var_10h], ecx\l0x0010a976      mov dl, byte [edx]\l0x0010a978      mov byte [eax], dl\l0x0010a97a      mov al, byte [eax]\l0x0010a97c      test al, al\l0x0010a97e      jne 0x10a964\l"]
	"0x0010a980" [URL="sym.rdsprocess/0x0010a980", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010a980      mov eax, dword [arg_8h]\l0x0010a983      mov dword [var_4dch], eax\l0x0010a987      mov dword [var_4e0h], 0x24c                            ; [0x24c:4]=-1 ; 588\l0x0010a98f      lea eax, [var_4c0h]\l0x0010a995      mov dword [var_4e4h], eax\l0x0010a999      mov dword [var_4e8h], 0x4c                             ; 'L'\l                                                                       ; [0x4c:4]=-1 ; 76\l0x0010a9a1      lea eax, [var_274h]\l0x0010a9a7      mov dword [esp], eax\l0x0010a9aa      call sym.rdscomm\l0x0010a9af      mov dword [var_20h], eax\l0x0010a9b2      cmp dword [var_20h], 0xffffffff\l0x0010a9b6      je 0x10a9e8\l"]
	"0x0010a9b8" [URL="sym.rdsprocess/0x0010a9b8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010a9b8      cmp dword [var_20h], 0xfffffffd\l0x0010a9bc      je 0x10a9e8\l"]
	"0x0010a9be" [URL="sym.rdsprocess/0x0010a9be", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010a9be      mov ax, word [var_4beh]\l0x0010a9c5      shr ax, 8\l0x0010a9c9      xor edx, edx\l0x0010a9cb      mov dx, ax\l0x0010a9ce      mov ax, word [var_4beh]\l0x0010a9d5      and eax, 0xffff\l0x0010a9da      shl eax, 8\l0x0010a9dd      and eax, 0xffff\l0x0010a9e2      or eax, edx\l0x0010a9e4      test eax, eax\l0x0010a9e6      je 0x10a9f4\l"]
	"0x0010a9e8" [URL="sym.rdsprocess/0x0010a9e8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from sym.rdsprocess @ 0x10a9b6, 0x10a9bc\l0x0010a9e8      mov dword [esp], 0x118ac0                              ; [0x118ac0:4]=0x6c696146 ; \"Failed to contact remote disk server\"\l0x0010a9ef      call sym.panic\l"]
	"0x0010a9f4" [URL="sym.rdsprocess/0x0010a9f4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rdsprocess @ 0x10a9e6\l0x0010a9f4      mov dword [var_18h], 0\l0x0010a9fb      jmp 0x10aa1c\l"]
	"0x0010a9fd" [URL="sym.rdsprocess/0x0010a9fd", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rdsprocess @ 0x10aa23\l0x0010a9fd      lea edx, [var_480h]\l0x0010aa03      mov eax, dword [var_18h]\l0x0010aa06      add eax, edx\l0x0010aa08      mov al, byte [eax + 0xc]\l0x0010aa0b      mov ecx, dword [var_1ch]\l0x0010aa0e      mov edx, dword [var_18h]\l0x0010aa11      add edx, ecx\l0x0010aa13      add edx, 0x10                                          ; 16\l0x0010aa16      mov byte [edx + 0xc], al\l0x0010aa19      inc dword [var_18h]\l"]
	"0x0010aa1c" [URL="sym.rdsprocess/0x0010aa1c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rdsprocess @ 0x10a9fb\l0x0010aa1c      cmp dword [var_18h], 0x1ff\l0x0010aa23      jle 0x10a9fd\l"]
	"0x0010aa25" [URL="sym.rdsprocess/0x0010aa25", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010aa25      mov eax, dword [var_1ch]\l0x0010aa28      mov eax, dword [eax]\l0x0010aa2a      mov dword [var_24h], eax\l0x0010aa2d      mov eax, dword [var_1ch]\l0x0010aa30      mov eax, dword [eax + 4]\l0x0010aa33      mov dword [var_28h], eax\l0x0010aa36      mov eax, dword [var_1ch]\l0x0010aa39      mov edx, dword [eax + 4]\l0x0010aa3c      mov eax, dword [var_24h]\l0x0010aa3f      mov dword [eax + 4], edx\l0x0010aa42      mov eax, dword [var_1ch]\l0x0010aa45      mov edx, dword [eax]\l0x0010aa47      mov eax, dword [var_28h]\l0x0010aa4a      mov dword [eax], edx\l0x0010aa4c      mov eax, dword [arg_8h]\l0x0010aa4f      add eax, 0x58                                          ; 88\l0x0010aa52      mov dword [var_28h], eax\l0x0010aa55      mov eax, dword [var_28h]\l0x0010aa58      mov eax, dword [eax]\l0x0010aa5a      mov dword [var_24h], eax\l0x0010aa5d      mov eax, dword [var_1ch]\l0x0010aa60      mov edx, dword [var_24h]\l0x0010aa63      mov dword [eax], edx\l0x0010aa65      mov eax, dword [var_1ch]\l0x0010aa68      mov edx, dword [var_28h]\l0x0010aa6b      mov dword [eax + 4], edx\l0x0010aa6e      mov eax, dword [var_28h]\l0x0010aa71      mov edx, dword [var_1ch]\l0x0010aa74      mov dword [eax], edx\l0x0010aa76      mov eax, dword [var_24h]\l0x0010aa79      mov edx, dword [var_1ch]\l0x0010aa7c      mov dword [eax + 4], edx\l0x0010aa7f      mov eax, dword [var_1ch]\l0x0010aa82      mov dword [eax + 0xc], 1\l0x0010aa89      mov eax, dword [arg_8h]\l0x0010aa8c      mov eax, dword [eax + 0x74]\l0x0010aa8f      mov dword [esp], eax\l0x0010aa92      call sym.signal                                        ; void signal(int sig, void *func)\l0x0010aa97      mov edx, dword [var_1ch]\l0x0010aa9a      mov eax, dword [var_1ch]\l0x0010aa9d      mov eax, dword [eax + 0x18]\l0x0010aaa0      mov dword [var_4e8h], edx\l0x0010aaa4      mov dword [esp], eax\l0x0010aaa7      call sym.send                                          ; ssize_t send(int socket, void *buffer, size_t length, int flags)\l0x0010aaac      mov eax, dword [arg_8h]\l0x0010aaaf      mov eax, dword [eax + 0x48]\l0x0010aab2      mov dword [var_14h], eax\l0x0010aab5      jmp 0x10ab41\l"]
	"0x0010aaba" [URL="sym.rdsprocess/0x0010aaba", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rdsprocess @ 0x10ab4a\l0x0010aaba      mov eax, dword [var_14h]\l0x0010aabd      mov edx, dword [eax + 0x10]\l0x0010aac0      mov eax, dword [var_1ch]\l0x0010aac3      mov eax, dword [eax + 0x10]\l0x0010aac6      cmp edx, eax\l0x0010aac8      jne 0x10ab39\l"]
	"0x0010aaca" [URL="sym.rdsprocess/0x0010aaca", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010aaca      mov eax, dword [var_1ch]\l0x0010aacd      mov eax, dword [eax + 0xc]\l0x0010aad0      lea edx, [eax + 1]\l0x0010aad3      mov eax, dword [var_1ch]\l0x0010aad6      mov dword [eax + 0xc], edx\l0x0010aad9      mov edx, dword [var_1ch]\l0x0010aadc      mov eax, dword [var_14h]\l0x0010aadf      mov eax, dword [eax + 0x18]\l0x0010aae2      mov dword [var_4e8h], edx\l0x0010aae6      mov dword [esp], eax\l0x0010aae9      call sym.send                                          ; ssize_t send(int socket, void *buffer, size_t length, int flags)\l0x0010aaee      mov eax, dword [var_14h]\l0x0010aaf1      mov eax, dword [eax + 4]\l0x0010aaf4      mov dword [var_28h], eax\l0x0010aaf7      mov eax, dword [var_14h]\l0x0010aafa      mov eax, dword [eax]\l0x0010aafc      mov dword [var_24h], eax\l0x0010aaff      mov eax, dword [var_1ch]\l0x0010ab02      mov edx, dword [eax]\l0x0010ab04      mov eax, dword [var_28h]\l0x0010ab07      mov dword [eax], edx\l0x0010ab09      mov eax, dword [var_1ch]\l0x0010ab0c      mov edx, dword [eax + 4]\l0x0010ab0f      mov eax, dword [var_24h]\l0x0010ab12      mov dword [eax + 4], edx\l0x0010ab15      mov eax, dword [arg_8h]\l0x0010ab18      mov edx, dword [eax + 0x68]\l0x0010ab1b      mov eax, dword [var_14h]\l0x0010ab1e      mov dword [eax], edx\l0x0010ab20      mov eax, dword [arg_8h]\l0x0010ab23      mov edx, dword [var_14h]\l0x0010ab26      mov dword [eax + 0x68], edx\l0x0010ab29      mov eax, dword [arg_8h]\l0x0010ab2c      mov eax, dword [eax + 0x74]\l0x0010ab2f      mov dword [esp], eax\l0x0010ab32      call sym.signal                                        ; void signal(int sig, void *func)\l0x0010ab37      jmp 0x10ab50\l"]
	"0x0010ab39" [URL="sym.rdsprocess/0x0010ab39", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rdsprocess @ 0x10aac8\l0x0010ab39      mov eax, dword [var_14h]\l0x0010ab3c      mov eax, dword [eax]\l0x0010ab3e      mov dword [var_14h], eax\l"]
	"0x0010ab41" [URL="sym.rdsprocess/0x0010ab41", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rdsprocess @ 0x10aab5\l0x0010ab41      mov eax, dword [arg_8h]\l0x0010ab44      add eax, 0x50                                          ; 80\l0x0010ab47      cmp eax, dword [var_14h]\l0x0010ab4a      jne 0x10aaba\l"]
	"0x0010ab50" [URL="sym.rdsprocess/0x0010ab50", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rdsprocess @ 0x10ab37\l0x0010ab50      jmp 0x10ad40\l"]
	"0x0010ab55" [URL="sym.rdsprocess/0x0010ab55", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rdsprocess @ 0x10a901\l0x0010ab55      mov word [var_274h], 0x2000\l0x0010ab5e      mov eax, dword [var_1ch]\l0x0010ab61      mov eax, dword [eax + 0x10]\l0x0010ab64      mov dword [var_22ch], eax\l0x0010ab6a      mov word [var_272h], 0\l0x0010ab73      mov dword [var_270h], 0\l0x0010ab7d      lea eax, [var_274h]\l0x0010ab83      add eax, 8\l0x0010ab86      mov dword [var_ch], eax\l0x0010ab89      mov dword [var_4e4h], 0x40                             ; '@'\l                                                                       ; [0x40:4]=-1 ; 64\l0x0010ab91      mov dword [var_4e8h], 0\l0x0010ab99      mov eax, dword [var_ch]\l0x0010ab9c      mov dword [esp], eax\l0x0010ab9f      call sym.memset                                        ; void *memset(void *s, int c, size_t n)\l0x0010aba4      mov eax, dword [arg_8h]\l0x0010aba7      add eax, 4\l0x0010abaa      mov dword [var_10h], eax\l0x0010abad      nop\l"]
	"0x0010abae" [URL="sym.rdsprocess/0x0010abae", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rdsprocess @ 0x10abc8\l0x0010abae      mov eax, dword [var_ch]\l0x0010abb1      lea edx, [eax + 1]\l0x0010abb4      mov dword [var_ch], edx\l0x0010abb7      mov edx, dword [var_10h]\l0x0010abba      lea ecx, [edx + 1]\l0x0010abbd      mov dword [var_10h], ecx\l0x0010abc0      mov dl, byte [edx]\l0x0010abc2      mov byte [eax], dl\l0x0010abc4      mov al, byte [eax]\l0x0010abc6      test al, al\l0x0010abc8      jne 0x10abae\l"]
	"0x0010abca" [URL="sym.rdsprocess/0x0010abca", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010abca      mov dword [var_18h], 0\l0x0010abd1      jmp 0x10abf2\l"]
	"0x0010abd3" [URL="sym.rdsprocess/0x0010abd3", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rdsprocess @ 0x10abf9\l0x0010abd3      mov edx, dword [var_1ch]\l0x0010abd6      mov eax, dword [var_18h]\l0x0010abd9      add eax, edx\l0x0010abdb      add eax, 0x10                                          ; 16\l0x0010abde      mov al, byte [eax + 0xc]\l0x0010abe1      lea ecx, [var_234h]\l0x0010abe7      mov edx, dword [var_18h]\l0x0010abea      add edx, ecx\l0x0010abec      mov byte [edx + 0xc], al\l0x0010abef      inc dword [var_18h]\l"]
	"0x0010abf2" [URL="sym.rdsprocess/0x0010abf2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rdsprocess @ 0x10abd1\l0x0010abf2      cmp dword [var_18h], 0x1ff\l0x0010abf9      jle 0x10abd3\l"]
	"0x0010abfb" [URL="sym.rdsprocess/0x0010abfb", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010abfb      mov eax, dword [var_1ch]\l0x0010abfe      mov eax, dword [eax]\l0x0010ac00      mov dword [var_24h], eax\l0x0010ac03      mov eax, dword [var_1ch]\l0x0010ac06      mov eax, dword [eax + 4]\l0x0010ac09      mov dword [var_28h], eax\l0x0010ac0c      mov eax, dword [var_28h]\l0x0010ac0f      mov edx, dword [var_24h]\l0x0010ac12      mov dword [eax], edx\l0x0010ac14      mov eax, dword [var_24h]\l0x0010ac17      mov edx, dword [var_28h]\l0x0010ac1a      mov dword [eax + 4], edx\l0x0010ac1d      mov eax, dword [arg_8h]\l0x0010ac20      add eax, 0x58                                          ; 88\l0x0010ac23      mov dword [var_28h], eax\l0x0010ac26      mov eax, dword [var_28h]\l0x0010ac29      mov eax, dword [eax]\l0x0010ac2b      mov dword [var_24h], eax\l0x0010ac2e      mov eax, dword [var_1ch]\l0x0010ac31      mov edx, dword [var_24h]\l0x0010ac34      mov dword [eax], edx\l0x0010ac36      mov eax, dword [var_1ch]\l0x0010ac39      mov edx, dword [var_28h]\l0x0010ac3c      mov dword [eax + 4], edx\l0x0010ac3f      mov eax, dword [var_28h]\l0x0010ac42      mov edx, dword [var_1ch]\l0x0010ac45      mov dword [eax], edx\l0x0010ac47      mov eax, dword [var_24h]\l0x0010ac4a      mov edx, dword [var_1ch]\l0x0010ac4d      mov dword [eax + 4], edx\l0x0010ac50      mov eax, dword [var_1ch]\l0x0010ac53      mov dword [eax + 0xc], 0\l0x0010ac5a      mov eax, dword [arg_8h]\l0x0010ac5d      mov eax, dword [eax + 0x74]\l0x0010ac60      mov dword [esp], eax\l0x0010ac63      call sym.signal                                        ; void signal(int sig, void *func)\l0x0010ac68      mov eax, dword [arg_8h]\l0x0010ac6b      mov dword [var_4dch], eax\l0x0010ac6f      mov dword [var_4e0h], 0x4c                             ; 'L'\l                                                                       ; [0x4c:4]=-1 ; 76\l0x0010ac77      lea eax, [var_4c0h]\l0x0010ac7d      mov dword [var_4e4h], eax\l0x0010ac81      mov dword [var_4e8h], 0x24c                            ; [0x24c:4]=-1 ; 588\l0x0010ac89      lea eax, [var_274h]\l0x0010ac8f      mov dword [esp], eax\l0x0010ac92      call sym.rdscomm\l0x0010ac97      mov dword [var_20h], eax\l0x0010ac9a      cmp dword [var_20h], 0xffffffff\l0x0010ac9e      je 0x10acd0\l"]
	"0x0010aca0" [URL="sym.rdsprocess/0x0010aca0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010aca0      cmp dword [var_20h], 0xfffffffd\l0x0010aca4      je 0x10acd0\l"]
	"0x0010aca6" [URL="sym.rdsprocess/0x0010aca6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010aca6      mov ax, word [var_4beh]\l0x0010acad      shr ax, 8\l0x0010acb1      xor edx, edx\l0x0010acb3      mov dx, ax\l0x0010acb6      mov ax, word [var_4beh]\l0x0010acbd      and eax, 0xffff\l0x0010acc2      shl eax, 8\l0x0010acc5      and eax, 0xffff\l0x0010acca      or eax, edx\l0x0010accc      test eax, eax\l0x0010acce      je 0x10acde\l"]
	"0x0010acd0" [URL="sym.rdsprocess/0x0010acd0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from sym.rdsprocess @ 0x10ac9e, 0x10aca4\l0x0010acd0      mov dword [esp], 0x118ae8                              ; [0x118ae8:4]=0x6c696166 ; \"failed to contact remote disk server\"\l0x0010acd7      call sym.panic\l0x0010acdc      jmp 0x10ad40\l"]
	"0x0010acde" [URL="sym.rdsprocess/0x0010acde", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rdsprocess @ 0x10acce\l0x0010acde      jmp 0x10ad40\l"]
	"0x0010ace0" [URL="sym.rdsprocess/0x0010ace0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rdsprocess @ 0x10a90a\l0x0010ace0      mov eax, dword [var_1ch]\l0x0010ace3      mov eax, dword [eax + 0x18]\l0x0010ace6      mov dword [var_4e8h], 1\l0x0010acee      mov dword [esp], eax\l0x0010acf1      call sym.send                                          ; ssize_t send(int socket, void *buffer, size_t length, int flags)\l0x0010acf6      mov eax, dword [var_1ch]\l0x0010acf9      mov eax, dword [eax]\l0x0010acfb      mov dword [var_24h], eax\l0x0010acfe      mov eax, dword [var_1ch]\l0x0010ad01      mov eax, dword [eax + 4]\l0x0010ad04      mov dword [var_28h], eax\l0x0010ad07      mov eax, dword [var_1ch]\l0x0010ad0a      mov edx, dword [eax + 4]\l0x0010ad0d      mov eax, dword [var_24h]\l0x0010ad10      mov dword [eax + 4], edx\l0x0010ad13      mov eax, dword [var_1ch]\l0x0010ad16      mov edx, dword [eax]\l0x0010ad18      mov eax, dword [var_28h]\l0x0010ad1b      mov dword [eax], edx\l0x0010ad1d      mov eax, dword [arg_8h]\l0x0010ad20      mov edx, dword [eax + 0x68]\l0x0010ad23      mov eax, dword [var_1ch]\l0x0010ad26      mov dword [eax], edx\l0x0010ad28      mov eax, dword [arg_8h]\l0x0010ad2b      mov edx, dword [var_1ch]\l0x0010ad2e      mov dword [eax + 0x68], edx\l0x0010ad31      mov eax, dword [arg_8h]\l0x0010ad34      mov eax, dword [eax + 0x74]\l0x0010ad37      mov dword [esp], eax\l0x0010ad3a      call sym.signal                                        ; void signal(int sig, void *func)\l0x0010ad3f      nop\l"]
	"0x0010ad40" [URL="sym.rdsprocess/0x0010ad40", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from sym.rdsprocess @ 0x10ab50, 0x10acdc, 0x10acde\l0x0010ad40      jmp 0x10a8e1\l"]
        "0x0010a8d8" -> "0x0010a8e1" [color="#0037da"];
        "0x0010a8e1" -> "0x0010ab55" [color="#13a10e"];
        "0x0010a8e1" -> "0x0010a907" [color="#c50f1f"];
        "0x0010a907" -> "0x0010ace0" [color="#13a10e"];
        "0x0010a907" -> "0x0010a910" [color="#c50f1f"];
        "0x0010a910" -> "0x0010a917" [color="#13a10e"];
        "0x0010a910" -> "0x0010a915" [color="#c50f1f"];
        "0x0010a915" -> "0x0010a8e1" [color="#0037da"];
        "0x0010a917" -> "0x0010a964" [color="#0037da"];
        "0x0010a964" -> "0x0010a964" [color="#13a10e"];
        "0x0010a964" -> "0x0010a980" [color="#c50f1f"];
        "0x0010a980" -> "0x0010a9e8" [color="#13a10e"];
        "0x0010a980" -> "0x0010a9b8" [color="#c50f1f"];
        "0x0010a9b8" -> "0x0010a9e8" [color="#13a10e"];
        "0x0010a9b8" -> "0x0010a9be" [color="#c50f1f"];
        "0x0010a9be" -> "0x0010a9f4" [color="#13a10e"];
        "0x0010a9be" -> "0x0010a9e8" [color="#c50f1f"];
        "0x0010a9e8" -> "0x0010a9f4" [color="#0037da"];
        "0x0010a9f4" -> "0x0010aa1c" [color="#0037da"];
        "0x0010a9fd" -> "0x0010aa1c" [color="#0037da"];
        "0x0010aa1c" -> "0x0010a9fd" [color="#13a10e"];
        "0x0010aa1c" -> "0x0010aa25" [color="#c50f1f"];
        "0x0010aa25" -> "0x0010ab41" [color="#0037da"];
        "0x0010aaba" -> "0x0010ab39" [color="#13a10e"];
        "0x0010aaba" -> "0x0010aaca" [color="#c50f1f"];
        "0x0010aaca" -> "0x0010ab50" [color="#0037da"];
        "0x0010ab39" -> "0x0010ab41" [color="#0037da"];
        "0x0010ab41" -> "0x0010aaba" [color="#13a10e"];
        "0x0010ab41" -> "0x0010ab50" [color="#c50f1f"];
        "0x0010ab50" -> "0x0010ad40" [color="#0037da"];
        "0x0010ab55" -> "0x0010abae" [color="#0037da"];
        "0x0010abae" -> "0x0010abae" [color="#13a10e"];
        "0x0010abae" -> "0x0010abca" [color="#c50f1f"];
        "0x0010abca" -> "0x0010abf2" [color="#0037da"];
        "0x0010abd3" -> "0x0010abf2" [color="#0037da"];
        "0x0010abf2" -> "0x0010abd3" [color="#13a10e"];
        "0x0010abf2" -> "0x0010abfb" [color="#c50f1f"];
        "0x0010abfb" -> "0x0010acd0" [color="#13a10e"];
        "0x0010abfb" -> "0x0010aca0" [color="#c50f1f"];
        "0x0010aca0" -> "0x0010acd0" [color="#13a10e"];
        "0x0010aca0" -> "0x0010aca6" [color="#c50f1f"];
        "0x0010aca6" -> "0x0010acde" [color="#13a10e"];
        "0x0010aca6" -> "0x0010acd0" [color="#c50f1f"];
        "0x0010acd0" -> "0x0010ad40" [color="#0037da"];
        "0x0010acde" -> "0x0010ad40" [color="#0037da"];
        "0x0010ace0" -> "0x0010ad40" [color="#0037da"];
        "0x0010ad40" -> "0x0010a8e1" [color="#0037da"];
}
