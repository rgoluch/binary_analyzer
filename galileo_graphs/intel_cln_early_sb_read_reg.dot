digraph code {
	graph [bgcolor=azure fontsize=8 fontname="Courier" splines="ortho"];
	node [fillcolor=gray style=filled shape=box];
	edge [arrowhead="normal"];
	"0x00100cab" [URL="sym.intel_cln_early_sb_read_reg/0x00100cab", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="  ; CALL XREF from sym.remove_irm_protections @ 0x100f60\l145: sym.intel_cln_early_sb_read_reg (int32_t arg_8h, int32_t arg_ch, int32_t arg_10h, int32_t arg_14h);\l; var int32_t var_20h @ ebp-0x20\l; var int32_t var_1ch @ ebp-0x1c\l; var int32_t var_ch @ ebp-0xc\l; var int32_t var_4h @ ebp-0x4\l; arg int32_t arg_8h @ ebp+0x8\l; arg int32_t arg_ch @ ebp+0xc\l; arg int32_t arg_10h @ ebp+0x10\l; arg int32_t arg_14h @ ebp+0x14\l0x00100cab      push ebp\l0x00100cac      mov ebp, esp\l0x00100cae      push ebx\l0x00100caf      sub esp, 0x24\l0x00100cb2      call sym.__x86.get_pc_thunk.bx\l0x00100cb7      add ebx, 0x20349\l0x00100cbd      mov edx, dword [arg_ch]\l0x00100cc0      mov eax, dword [arg_10h]\l0x00100cc3      mov byte [var_1ch], dl\l0x00100cc6      mov byte [var_20h], al\l0x00100cc9      mov al, byte [var_1ch]\l0x00100ccc      and eax, 0xff                                          ; 255\l0x00100cd1      shl eax, 0x18\l0x00100cd4      mov edx, eax\l0x00100cd6      mov eax, dword [arg_8h]\l0x00100cd9      shl eax, 0x10\l0x00100cdc      and eax, 0xff0000\l0x00100ce1      or edx, eax\l0x00100ce3      mov al, byte [var_20h]\l0x00100ce6      and eax, 0xff                                          ; 255\l0x00100ceb      shl eax, 8\l0x00100cee      and eax, 0xffff\l0x00100cf3      or eax, edx\l0x00100cf5      or al, 0xf0                                            ; 240\l0x00100cf7      mov dword [var_ch], eax\l0x00100cfa      cmp dword [arg_14h], 0\l0x00100cfe      je 0x100d36\l"]
	"0x00100d00" [URL="sym.intel_cln_early_sb_read_reg/0x00100d00", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00100d00      mov eax, dword [ebx + 0x20]\l0x00100d06      sub esp, 4\l0x00100d09      push dword [var_ch]\l0x00100d0c      push 0xd0                                              ; 208\l0x00100d11      push eax\l0x00100d12      call sym.pci_write_config_dword\l0x00100d17      add esp, 0x10\l0x00100d1a      mov eax, dword [ebx + 0x20]\l0x00100d20      sub esp, 4\l0x00100d23      push dword [arg_14h]\l0x00100d26      push 0xd4                                              ; 212\l0x00100d2b      push eax\l0x00100d2c      call sym.pci_read_config_dword\l0x00100d31      add esp, 0x10\l0x00100d34      jmp 0x100d37\l"]
	"0x00100d36" [URL="sym.intel_cln_early_sb_read_reg/0x00100d36", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.intel_cln_early_sb_read_reg @ 0x100cfe\l0x00100d36      nop\l"]
	"0x00100d37" [URL="sym.intel_cln_early_sb_read_reg/0x00100d37", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.intel_cln_early_sb_read_reg @ 0x100d34\l0x00100d37      mov ebx, dword [var_4h]\l0x00100d3a      leave\l0x00100d3b      ret\l"]
        "0x00100cab" -> "0x00100d36" [color="#13a10e"];
        "0x00100cab" -> "0x00100d00" [color="#c50f1f"];
        "0x00100d00" -> "0x00100d37" [color="#0037da"];
        "0x00100d36" -> "0x00100d37" [color="#0037da"];
}
