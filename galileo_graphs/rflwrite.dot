digraph code {
	graph [bgcolor=azure fontsize=8 fontname="Courier" splines="ortho"];
	node [fillcolor=gray style=filled shape=box];
	edge [arrowhead="normal"];
	"0x0010cd43" [URL="sym.rflwrite/0x0010cd43", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="  ; CALL XREF from sym.rflputc @ 0x10c97e\l822: sym.rflwrite (int32_t arg_8h, int32_t arg_ch, int32_t arg_10h);\l; var int32_t var_540h @ ebp-0x540\l; var int32_t var_53eh @ ebp-0x53e\l; var int32_t var_4b4h @ ebp-0x4b4\l; var int32_t var_4b0h @ ebp-0x4b0\l; var int32_t var_4aeh @ ebp-0x4ae\l; var int32_t var_4ach @ ebp-0x4ac\l; var int32_t var_428h @ ebp-0x428\l; var int32_t var_424h @ ebp-0x424\l; var int32_t var_420h @ ebp-0x420\l; var int32_t var_20h @ ebp-0x20\l; var int32_t var_1ch @ ebp-0x1c\l; var int32_t var_18h @ ebp-0x18\l; var int32_t var_14h @ ebp-0x14\l; var int32_t var_10h @ ebp-0x10\l; var int32_t var_ch @ ebp-0xc\l; arg int32_t arg_8h @ ebp+0x8\l; arg int32_t arg_ch @ ebp+0xc\l; arg int32_t arg_10h @ ebp+0x10\l; var int32_t var_558h @ esp+0x4\l; var int32_t var_554h @ esp+0x8\l; var int32_t var_550h @ esp+0xc\l0x0010cd43      push ebp\l0x0010cd44      mov ebp, esp\l0x0010cd46      sub esp, 0x558\l0x0010cd4c      mov eax, dword [0x13fe10]                              ; [0x13fe10:4]=0\l0x0010cd51      mov dword [esp], eax\l0x0010cd54      call sym.wait                                          ; pid_t wait(int *wstatus)\l0x0010cd59      cmp dword [arg_10h], 0\l0x0010cd5d      jle 0x10cd68\l"]
	"0x0010cd5f" [URL="sym.rflwrite/0x0010cd5f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010cd5f      cmp dword [arg_10h], 0x400\l0x0010cd66      jle 0x10cd7f\l"]
	"0x0010cd68" [URL="sym.rflwrite/0x0010cd68", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rflwrite @ 0x10cd5d\l0x0010cd68      mov eax, dword [0x13fe10]                              ; [0x13fe10:4]=0\l0x0010cd6d      mov dword [esp], eax\l0x0010cd70      call sym.signal                                        ; void signal(int sig, void *func)\l0x0010cd75      mov eax, 0xffffffff                                    ; -1\l0x0010cd7a      jmp 0x10d077\l"]
	"0x0010cd7f" [URL="sym.rflwrite/0x0010cd7f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rflwrite @ 0x10cd66\l0x0010cd7f      mov eax, dword [arg_8h]\l0x0010cd82      mov edx, dword [eax + 4]\l0x0010cd85      mov eax, edx\l0x0010cd87      shl eax, 3\l0x0010cd8a      add eax, edx\l0x0010cd8c      shl eax, 4\l0x0010cd8f      add eax, obj.rfltab                                    ; 0x13f860\l0x0010cd94      mov dword [var_1ch], eax\l0x0010cd97      mov eax, dword [var_1ch]\l0x0010cd9a      mov eax, dword [eax]\l0x0010cd9c      test eax, eax\l0x0010cd9e      je 0x10cdb0\l"]
	"0x0010cda0" [URL="sym.rflwrite/0x0010cda0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010cda0      mov eax, dword [var_1ch]\l0x0010cda3      mov eax, dword [eax + 0x8c]\l0x0010cda9      and eax, 2\l0x0010cdac      test eax, eax\l0x0010cdae      jne 0x10cdc7\l"]
	"0x0010cdb0" [URL="sym.rflwrite/0x0010cdb0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rflwrite @ 0x10cd9e\l0x0010cdb0      mov eax, dword [0x13fe10]                              ; [0x13fe10:4]=0\l0x0010cdb5      mov dword [esp], eax\l0x0010cdb8      call sym.signal                                        ; void signal(int sig, void *func)\l0x0010cdbd      mov eax, 0xffffffff                                    ; -1\l0x0010cdc2      jmp 0x10d077\l"]
	"0x0010cdc7" [URL="sym.rflwrite/0x0010cdc7", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rflwrite @ 0x10cdae\l0x0010cdc7      mov word [var_4b0h], 0x200                             ; 512\l0x0010cdd0      mov word [var_4aeh], 0\l0x0010cdd9      mov dword [var_4ach], 0\l0x0010cde3      mov eax, dword [var_1ch]\l0x0010cde6      add eax, 8\l0x0010cde9      mov dword [var_ch], eax\l0x0010cdec      lea eax, [var_4b0h]\l0x0010cdf2      add eax, 8\l0x0010cdf5      mov dword [var_10h], eax\l0x0010cdf8      mov dword [var_554h], 0x80                             ; [0x80:4]=-1 ; 128\l0x0010ce00      mov dword [var_558h], 0\l0x0010ce08      mov eax, dword [var_10h]\l0x0010ce0b      mov dword [esp], eax\l0x0010ce0e      call sym.memset                                        ; void *memset(void *s, int c, size_t n)\l0x0010ce13      mov dword [var_18h], 0\l0x0010ce1a      jmp 0x10ce3c\l"]
	"0x0010ce1c" [URL="sym.rflwrite/0x0010ce1c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rflwrite @ 0x10ce56\l0x0010ce1c      inc dword [var_18h]\l0x0010ce1f      cmp dword [var_18h], 0x7f\l0x0010ce23      jle 0x10ce3c\l"]
	"0x0010ce25" [URL="sym.rflwrite/0x0010ce25", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010ce25      mov eax, dword [0x13fe10]                              ; [0x13fe10:4]=0\l0x0010ce2a      mov dword [esp], eax\l0x0010ce2d      call sym.signal                                        ; void signal(int sig, void *func)\l0x0010ce32      mov eax, 0xffffffff                                    ; -1\l0x0010ce37      jmp 0x10d077\l"]
	"0x0010ce3c" [URL="sym.rflwrite/0x0010ce3c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from sym.rflwrite @ 0x10ce1a, 0x10ce23\l0x0010ce3c      mov eax, dword [var_10h]\l0x0010ce3f      lea edx, [eax + 1]\l0x0010ce42      mov dword [var_10h], edx\l0x0010ce45      mov edx, dword [var_ch]\l0x0010ce48      lea ecx, [edx + 1]\l0x0010ce4b      mov dword [var_ch], ecx\l0x0010ce4e      mov dl, byte [edx]\l0x0010ce50      mov byte [eax], dl\l0x0010ce52      mov al, byte [eax]\l0x0010ce54      test al, al\l0x0010ce56      jne 0x10ce1c\l"]
	"0x0010ce58" [URL="sym.rflwrite/0x0010ce58", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010ce58      nop\l"]
	"0x0010ce59" [URL="sym.rflwrite/0x0010ce59", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rflwrite @ 0x10ce73\l0x0010ce59      mov eax, dword [var_10h]\l0x0010ce5c      lea edx, [eax + 1]\l0x0010ce5f      mov dword [var_10h], edx\l0x0010ce62      mov edx, dword [var_ch]\l0x0010ce65      lea ecx, [edx + 1]\l0x0010ce68      mov dword [var_ch], ecx\l0x0010ce6b      mov dl, byte [edx]\l0x0010ce6d      mov byte [eax], dl\l0x0010ce6f      mov al, byte [eax]\l0x0010ce71      test al, al\l0x0010ce73      jne 0x10ce59\l"]
	"0x0010ce75" [URL="sym.rflwrite/0x0010ce75", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010ce75      mov eax, dword [var_1ch]\l0x0010ce78      mov eax, dword [eax + 0x88]\l0x0010ce7e      shr eax, 0x18\l0x0010ce81      mov edx, eax\l0x0010ce83      mov eax, dword [var_1ch]\l0x0010ce86      mov eax, dword [eax + 0x88]\l0x0010ce8c      shr eax, 8\l0x0010ce8f      and eax, 0xff00\l0x0010ce94      or edx, eax\l0x0010ce96      mov eax, dword [var_1ch]\l0x0010ce99      mov eax, dword [eax + 0x88]\l0x0010ce9f      shl eax, 8\l0x0010cea2      and eax, 0xff0000\l0x0010cea7      or edx, eax\l0x0010cea9      mov eax, dword [var_1ch]\l0x0010ceac      mov eax, dword [eax + 0x88]\l0x0010ceb2      shl eax, 0x18\l0x0010ceb5      or eax, edx\l0x0010ceb7      mov dword [var_428h], eax\l0x0010cebd      mov eax, dword [arg_10h]\l0x0010cec0      shr eax, 0x18\l0x0010cec3      mov edx, dword [arg_10h]\l0x0010cec6      sar edx, 8\l0x0010cec9      and edx, 0xff00\l0x0010cecf      or edx, eax\l0x0010ced1      mov eax, dword [arg_10h]\l0x0010ced4      shl eax, 8\l0x0010ced7      and eax, 0xff0000\l0x0010cedc      or eax, edx\l0x0010cede      mov edx, eax\l0x0010cee0      mov eax, dword [arg_10h]\l0x0010cee3      shl eax, 0x18\l0x0010cee6      or eax, edx\l0x0010cee8      mov dword [var_424h], eax\l0x0010ceee      mov dword [var_14h], 0\l0x0010cef5      jmp 0x10cf12\l"]
	"0x0010cef7" [URL="sym.rflwrite/0x0010cef7", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rflwrite @ 0x10cf18\l0x0010cef7      mov eax, dword [arg_ch]\l0x0010cefa      lea edx, [eax + 1]\l0x0010cefd      mov dword [arg_ch], edx\l0x0010cf00      mov al, byte [eax]\l0x0010cf02      lea ecx, [var_420h]\l0x0010cf08      mov edx, dword [var_14h]\l0x0010cf0b      add edx, ecx\l0x0010cf0d      mov byte [edx], al\l0x0010cf0f      inc dword [var_14h]\l"]
	"0x0010cf12" [URL="sym.rflwrite/0x0010cf12", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rflwrite @ 0x10cef5\l0x0010cf12      mov eax, dword [var_14h]\l0x0010cf15      cmp eax, dword [arg_10h]\l0x0010cf18      jl 0x10cef7\l"]
	"0x0010cf1a" [URL="sym.rflwrite/0x0010cf1a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010cf1a      jmp 0x10cf2d\l"]
	"0x0010cf1c" [URL="sym.rflwrite/0x0010cf1c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rflwrite @ 0x10cf34\l0x0010cf1c      mov eax, dword [var_14h]\l0x0010cf1f      lea edx, [eax + 1]\l0x0010cf22      mov dword [var_14h], edx\l0x0010cf25      mov byte [ebp + eax - 0x420], 0\l"]
	"0x0010cf2d" [URL="sym.rflwrite/0x0010cf2d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rflwrite @ 0x10cf1a\l0x0010cf2d      cmp dword [var_14h], 0x3ff\l0x0010cf34      jle 0x10cf1c\l"]
	"0x0010cf36" [URL="sym.rflwrite/0x0010cf36", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010cf36      mov dword [var_550h], 0x90                             ; [0x90:4]=-1 ; 144\l0x0010cf3e      lea eax, [var_540h]\l0x0010cf44      mov dword [var_554h], eax\l0x0010cf48      mov dword [var_558h], 0x490                            ; [0x490:4]=-1 ; 1168\l0x0010cf50      lea eax, [var_4b0h]\l0x0010cf56      mov dword [esp], eax\l0x0010cf59      call sym.rfscomm\l0x0010cf5e      mov dword [var_20h], eax\l0x0010cf61      cmp dword [var_20h], 0xffffffff\l0x0010cf65      jne 0x10cf7e\l"]
	"0x0010cf67" [URL="sym.rflwrite/0x0010cf67", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010cf67      mov eax, dword [0x13fe10]                              ; [0x13fe10:4]=0\l0x0010cf6c      mov dword [esp], eax\l0x0010cf6f      call sym.signal                                        ; void signal(int sig, void *func)\l0x0010cf74      mov eax, 0xffffffff                                    ; -1\l0x0010cf79      jmp 0x10d077\l"]
	"0x0010cf7e" [URL="sym.rflwrite/0x0010cf7e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rflwrite @ 0x10cf65\l0x0010cf7e      cmp dword [var_20h], 0xfffffffd\l0x0010cf82      jne 0x10cfa7\l"]
	"0x0010cf84" [URL="sym.rflwrite/0x0010cf84", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010cf84      mov dword [esp], 0x118cf4                              ; [0x118cf4:4]=0x656d6954 ; \"Timeout during remote file read\\n\"\l0x0010cf8b      call sym.kprintf\l0x0010cf90      mov eax, dword [0x13fe10]                              ; [0x13fe10:4]=0\l0x0010cf95      mov dword [esp], eax\l0x0010cf98      call sym.signal                                        ; void signal(int sig, void *func)\l0x0010cf9d      mov eax, 0xffffffff                                    ; -1\l0x0010cfa2      jmp 0x10d077\l"]
	"0x0010cfa7" [URL="sym.rflwrite/0x0010cfa7", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rflwrite @ 0x10cf82\l0x0010cfa7      mov ax, word [var_53eh]\l0x0010cfae      shr ax, 8\l0x0010cfb2      xor edx, edx\l0x0010cfb4      mov dx, ax\l0x0010cfb7      mov ax, word [var_53eh]\l0x0010cfbe      and eax, 0xffff\l0x0010cfc3      shl eax, 8\l0x0010cfc6      and eax, 0xffff\l0x0010cfcb      or eax, edx\l0x0010cfcd      test eax, eax\l0x0010cfcf      je 0x10cfe8\l"]
	"0x0010cfd1" [URL="sym.rflwrite/0x0010cfd1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010cfd1      mov eax, dword [0x13fe10]                              ; [0x13fe10:4]=0\l0x0010cfd6      mov dword [esp], eax\l0x0010cfd9      call sym.signal                                        ; void signal(int sig, void *func)\l0x0010cfde      mov eax, 0xffffffff                                    ; -1\l0x0010cfe3      jmp 0x10d077\l"]
	"0x0010cfe8" [URL="sym.rflwrite/0x0010cfe8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rflwrite @ 0x10cfcf\l0x0010cfe8      mov eax, dword [var_1ch]\l0x0010cfeb      mov eax, dword [eax + 0x88]\l0x0010cff1      mov edx, dword [var_4b4h]\l0x0010cff7      mov ecx, edx\l0x0010cff9      shr ecx, 0x18\l0x0010cffc      mov edx, dword [var_4b4h]\l0x0010d002      shr edx, 8\l0x0010d005      and edx, 0xff00\l0x0010d00b      or ecx, edx\l0x0010d00d      mov edx, dword [var_4b4h]\l0x0010d013      shl edx, 8\l0x0010d016      and edx, 0xff0000\l0x0010d01c      or ecx, edx\l0x0010d01e      mov edx, dword [var_4b4h]\l0x0010d024      shl edx, 0x18\l0x0010d027      or edx, ecx\l0x0010d029      add edx, eax\l0x0010d02b      mov eax, dword [var_1ch]\l0x0010d02e      mov dword [eax + 0x88], edx\l0x0010d034      mov eax, dword [0x13fe10]                              ; [0x13fe10:4]=0\l0x0010d039      mov dword [esp], eax\l0x0010d03c      call sym.signal                                        ; void signal(int sig, void *func)\l0x0010d041      mov eax, dword [var_4b4h]\l0x0010d047      shr eax, 0x18\l0x0010d04a      mov edx, eax\l0x0010d04c      mov eax, dword [var_4b4h]\l0x0010d052      shr eax, 8\l0x0010d055      and eax, 0xff00\l0x0010d05a      or edx, eax\l0x0010d05c      mov eax, dword [var_4b4h]\l0x0010d062      shl eax, 8\l0x0010d065      and eax, 0xff0000\l0x0010d06a      or edx, eax\l0x0010d06c      mov eax, dword [var_4b4h]\l0x0010d072      shl eax, 0x18\l0x0010d075      or eax, edx\l"]
	"0x0010d077" [URL="sym.rflwrite/0x0010d077", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; XREFS: CODE 0x0010cd7a  CODE 0x0010cdc2  CODE 0x0010ce37  \l; XREFS: CODE 0x0010cf79  CODE 0x0010cfa2  CODE 0x0010cfe3  \l0x0010d077      leave\l0x0010d078      ret\l"]
        "0x0010cd43" -> "0x0010cd68" [color="#13a10e"];
        "0x0010cd43" -> "0x0010cd5f" [color="#c50f1f"];
        "0x0010cd5f" -> "0x0010cd7f" [color="#13a10e"];
        "0x0010cd5f" -> "0x0010cd68" [color="#c50f1f"];
        "0x0010cd68" -> "0x0010d077" [color="#0037da"];
        "0x0010cd7f" -> "0x0010cdb0" [color="#13a10e"];
        "0x0010cd7f" -> "0x0010cda0" [color="#c50f1f"];
        "0x0010cda0" -> "0x0010cdc7" [color="#13a10e"];
        "0x0010cda0" -> "0x0010cdb0" [color="#c50f1f"];
        "0x0010cdb0" -> "0x0010d077" [color="#0037da"];
        "0x0010cdc7" -> "0x0010ce3c" [color="#0037da"];
        "0x0010ce1c" -> "0x0010ce3c" [color="#13a10e"];
        "0x0010ce1c" -> "0x0010ce25" [color="#c50f1f"];
        "0x0010ce25" -> "0x0010d077" [color="#0037da"];
        "0x0010ce3c" -> "0x0010ce1c" [color="#13a10e"];
        "0x0010ce3c" -> "0x0010ce58" [color="#c50f1f"];
        "0x0010ce58" -> "0x0010ce59" [color="#0037da"];
        "0x0010ce59" -> "0x0010ce59" [color="#13a10e"];
        "0x0010ce59" -> "0x0010ce75" [color="#c50f1f"];
        "0x0010ce75" -> "0x0010cf12" [color="#0037da"];
        "0x0010cef7" -> "0x0010cf12" [color="#0037da"];
        "0x0010cf12" -> "0x0010cef7" [color="#13a10e"];
        "0x0010cf12" -> "0x0010cf1a" [color="#c50f1f"];
        "0x0010cf1a" -> "0x0010cf2d" [color="#0037da"];
        "0x0010cf1c" -> "0x0010cf2d" [color="#0037da"];
        "0x0010cf2d" -> "0x0010cf1c" [color="#13a10e"];
        "0x0010cf2d" -> "0x0010cf36" [color="#c50f1f"];
        "0x0010cf36" -> "0x0010cf7e" [color="#13a10e"];
        "0x0010cf36" -> "0x0010cf67" [color="#c50f1f"];
        "0x0010cf67" -> "0x0010d077" [color="#0037da"];
        "0x0010cf7e" -> "0x0010cfa7" [color="#13a10e"];
        "0x0010cf7e" -> "0x0010cf84" [color="#c50f1f"];
        "0x0010cf84" -> "0x0010d077" [color="#0037da"];
        "0x0010cfa7" -> "0x0010cfe8" [color="#13a10e"];
        "0x0010cfa7" -> "0x0010cfd1" [color="#c50f1f"];
        "0x0010cfd1" -> "0x0010d077" [color="#0037da"];
        "0x0010cfe8" -> "0x0010d077" [color="#0037da"];
}
