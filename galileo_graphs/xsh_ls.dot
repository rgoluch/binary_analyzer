digraph code {
	graph [bgcolor=azure fontsize=8 fontname="Courier" splines="ortho"];
	node [fillcolor=gray style=filled shape=box];
	edge [arrowhead="normal"];
	"0x00115178" [URL="sym.xsh_ls/0x00115178", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="574: sym.xsh_ls (int32_t arg_8h, int32_t arg_ch);\l; var int32_t var_14h @ ebp-0x14\l; var int32_t var_10h @ ebp-0x10\l; var int32_t var_ch @ ebp-0xc\l; var int32_t var_4h @ ebp-0x4\l; arg int32_t arg_8h @ ebp+0x8\l; arg int32_t arg_ch @ ebp+0xc\l0x00115178      push ebp\l0x00115179      mov ebp, esp\l0x0011517b      push ebx\l0x0011517c      sub esp, 0x14\l0x0011517f      call sym.__x86.get_pc_thunk.bx\l0x00115184      add ebx, 0xbe7c\l0x0011518a      cmp dword [arg_8h], 2\l0x0011518e      jne 0x11521f\l"]
	"0x00115194" [URL="sym.xsh_ls/0x00115194", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00115194      mov eax, dword [arg_ch]\l0x00115197      add eax, 4\l0x0011519a      mov eax, dword [eax]\l0x0011519c      sub esp, 4\l0x0011519f      push 7                                                 ; 7\l0x001151a1      lea edx, [ebx - 0x7168]\l0x001151a7      push edx\l0x001151a8      push eax\l0x001151a9      call sym.strncmp                                       ; int strncmp(const char *s1, const char *s2, size_t n)\l0x001151ae      add esp, 0x10\l0x001151b1      test eax, eax\l0x001151b3      jne 0x11521f\l"]
	"0x001151b5" [URL="sym.xsh_ls/0x001151b5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x001151b5      mov eax, dword [arg_ch]\l0x001151b8      mov eax, dword [eax]\l0x001151ba      sub esp, 8\l0x001151bd      push eax\l0x001151be      lea eax, [ebx - 0x7161]\l0x001151c4      push eax\l0x001151c5      call sym.printf                                        ; int printf(const char *format)\l0x001151ca      add esp, 0x10\l0x001151cd      sub esp, 0xc\l0x001151d0      lea eax, [ebx - 0x7157]\l0x001151d6      push eax\l0x001151d7      call sym.printf                                        ; int printf(const char *format)\l0x001151dc      add esp, 0x10\l0x001151df      sub esp, 0xc\l0x001151e2      lea eax, [ebx - 0x7149]\l0x001151e8      push eax\l0x001151e9      call sym.printf                                        ; int printf(const char *format)\l0x001151ee      add esp, 0x10\l0x001151f1      sub esp, 0xc\l0x001151f4      lea eax, [ebx - 0x712e]\l0x001151fa      push eax\l0x001151fb      call sym.printf                                        ; int printf(const char *format)\l0x00115200      add esp, 0x10\l0x00115203      sub esp, 0xc\l0x00115206      lea eax, [ebx - 0x7124]\l0x0011520c      push eax\l0x0011520d      call sym.printf                                        ; int printf(const char *format)\l0x00115212      add esp, 0x10\l0x00115215      mov eax, 0\l0x0011521a      jmp 0x1153b1\l"]
	"0x0011521f" [URL="sym.xsh_ls/0x0011521f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from sym.xsh_ls @ 0x11518e, 0x1151b3\l0x0011521f      cmp dword [arg_8h], 1\l0x00115223      je 0x115241\l"]
	"0x00115225" [URL="sym.xsh_ls/0x00115225", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00115225      sub esp, 0xc\l0x00115228      lea eax, [ebx - 0x70fc]\l0x0011522e      push eax\l0x0011522f      call sym.printf                                        ; int printf(const char *format)\l0x00115234      add esp, 0x10\l0x00115237      mov eax, 1\l0x0011523c      jmp 0x1153b1\l"]
	"0x00115241" [URL="sym.xsh_ls/0x00115241", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.xsh_ls @ 0x115223\l0x00115241      mov eax, obj.Lf_data                                   ; 0x13f640\l0x00115247      lea eax, [eax + 8]\l0x0011524a      mov dword [var_10h], eax\l0x0011524d      mov eax, obj.Lf_data                                   ; 0x13f640\l0x00115253      mov eax, dword [eax + 4]\l0x00115256      sub esp, 0xc\l0x00115259      push eax\l0x0011525a      call sym.wait                                          ; pid_t wait(int *wstatus)\l0x0011525f      add esp, 0x10\l0x00115262      mov eax, obj.Lf_data                                   ; 0x13f640\l0x00115268      mov al, byte [eax + 0x208]\l0x0011526e      test al, al\l0x00115270      jne 0x11534d\l"]
	"0x00115276" [URL="sym.xsh_ls/0x00115276", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00115276      mov eax, obj.Lf_data                                   ; 0x13f640\l0x0011527c      mov eax, dword [eax]\l0x0011527e      sub esp, 4\l0x00115281      push 0\l0x00115283      push dword [var_10h]\l0x00115286      push eax\l0x00115287      call sym.read                                          ; ssize_t read(int fildes, void *buf, size_t nbyte)\l0x0011528c      add esp, 0x10\l0x0011528f      cmp eax, 0xffffffff\l0x00115292      jne 0x1152dd\l"]
	"0x00115294" [URL="sym.xsh_ls/0x00115294", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00115294      mov eax, obj.Lf_data                                   ; 0x13f640\l0x0011529a      mov eax, dword [eax + 4]\l0x0011529d      sub esp, 0xc\l0x001152a0      push eax\l0x001152a1      call sym.signal                                        ; void signal(int sig, void *func)\l0x001152a6      add esp, 0x10\l0x001152a9      mov eax, obj.currpid                                   ; 0x1212c0\l0x001152af      mov edx, dword [eax]\l0x001152b1      mov ecx, obj.proctab                                   ; 0x1212e0\l0x001152b7      mov eax, edx\l0x001152b9      shl eax, 3\l0x001152bc      sub eax, edx\l0x001152be      shl eax, 3\l0x001152c1      add eax, ecx\l0x001152c3      add eax, 0x32                                          ; 50\l0x001152c6      mov ax, word [eax]\l0x001152c9      cwde\l0x001152ca      sub esp, 8\l0x001152cd      lea edx, [ebx - 0x70cb]\l0x001152d3      push edx\l0x001152d4      push eax\l0x001152d5      call sym.fprintf                                       ; int fprintf(FILE *stream, const char *format,   ...)\l0x001152da      add esp, 0x10\l"]
	"0x001152dd" [URL="sym.xsh_ls/0x001152dd", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.xsh_ls @ 0x115292\l0x001152dd      sub esp, 0xc\l0x001152e0      push dword [var_10h]\l0x001152e3      call sym.lfscheck\l0x001152e8      add esp, 0x10\l0x001152eb      cmp eax, 0xffffffff\l0x001152ee      jne 0x115340\l"]
	"0x001152f0" [URL="sym.xsh_ls/0x001152f0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x001152f0      mov eax, obj.currpid                                   ; 0x1212c0\l0x001152f6      mov edx, dword [eax]\l0x001152f8      mov ecx, obj.proctab                                   ; 0x1212e0\l0x001152fe      mov eax, edx\l0x00115300      shl eax, 3\l0x00115303      sub eax, edx\l0x00115305      shl eax, 3\l0x00115308      add eax, ecx\l0x0011530a      add eax, 0x32                                          ; 50\l0x0011530d      mov ax, word [eax]\l0x00115310      cwde\l0x00115311      sub esp, 8\l0x00115314      lea edx, [ebx - 0x70b0]\l0x0011531a      push edx\l0x0011531b      push eax\l0x0011531c      call sym.fprintf                                       ; int fprintf(FILE *stream, const char *format,   ...)\l0x00115321      add esp, 0x10\l0x00115324      mov eax, obj.Lf_data                                   ; 0x13f640\l0x0011532a      mov eax, dword [eax + 4]\l0x0011532d      sub esp, 0xc\l0x00115330      push eax\l0x00115331      call sym.signal                                        ; void signal(int sig, void *func)\l0x00115336      add esp, 0x10\l0x00115339      mov eax, 1\l0x0011533e      jmp 0x1153b1\l"]
	"0x00115340" [URL="sym.xsh_ls/0x00115340", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.xsh_ls @ 0x1152ee\l0x00115340      mov eax, obj.Lf_data                                   ; 0x13f640\l0x00115346      mov byte [eax + 0x208], 1\l"]
	"0x0011534d" [URL="sym.xsh_ls/0x0011534d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.xsh_ls @ 0x115270\l0x0011534d      mov eax, obj.Lf_data                                   ; 0x13f640\l0x00115353      mov eax, dword [eax + 4]\l0x00115356      sub esp, 0xc\l0x00115359      push eax\l0x0011535a      call sym.signal                                        ; void signal(int sig, void *func)\l0x0011535f      add esp, 0x10\l0x00115362      mov dword [var_ch], 0\l0x00115369      jmp 0x1153a1\l"]
	"0x0011536b" [URL="sym.xsh_ls/0x0011536b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.xsh_ls @ 0x1153aa\l0x0011536b      mov edx, dword [var_ch]\l0x0011536e      mov eax, edx\l0x00115370      add eax, eax\l0x00115372      add eax, edx\l0x00115374      shl eax, 3\l0x00115377      lea edx, [eax + 0x10]\l0x0011537a      mov eax, dword [var_10h]\l0x0011537d      add eax, edx\l0x0011537f      add eax, 0xc                                           ; 12\l0x00115382      mov dword [var_14h], eax\l0x00115385      mov eax, dword [var_14h]\l0x00115388      add eax, 8\l0x0011538b      sub esp, 8\l0x0011538e      push eax\l0x0011538f      lea eax, [ebx - 0x7082]\l0x00115395      push eax\l0x00115396      call sym.printf                                        ; int printf(const char *format)\l0x0011539b      add esp, 0x10\l0x0011539e      inc dword [var_ch]\l"]
	"0x001153a1" [URL="sym.xsh_ls/0x001153a1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.xsh_ls @ 0x115369\l0x001153a1      mov eax, dword [var_10h]\l0x001153a4      mov eax, dword [eax + 0x18]\l0x001153a7      cmp dword [var_ch], eax\l0x001153aa      jl 0x11536b\l"]
	"0x001153ac" [URL="sym.xsh_ls/0x001153ac", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x001153ac      mov eax, 0\l"]
	"0x001153b1" [URL="sym.xsh_ls/0x001153b1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from sym.xsh_ls @ 0x11521a, 0x11523c, 0x11533e\l0x001153b1      mov ebx, dword [var_4h]\l0x001153b4      leave\l0x001153b5      ret\l"]
        "0x00115178" -> "0x0011521f" [color="#13a10e"];
        "0x00115178" -> "0x00115194" [color="#c50f1f"];
        "0x00115194" -> "0x0011521f" [color="#13a10e"];
        "0x00115194" -> "0x001151b5" [color="#c50f1f"];
        "0x001151b5" -> "0x001153b1" [color="#0037da"];
        "0x0011521f" -> "0x00115241" [color="#13a10e"];
        "0x0011521f" -> "0x00115225" [color="#c50f1f"];
        "0x00115225" -> "0x001153b1" [color="#0037da"];
        "0x00115241" -> "0x0011534d" [color="#13a10e"];
        "0x00115241" -> "0x00115276" [color="#c50f1f"];
        "0x00115276" -> "0x001152dd" [color="#13a10e"];
        "0x00115276" -> "0x00115294" [color="#c50f1f"];
        "0x00115294" -> "0x001152dd" [color="#0037da"];
        "0x001152dd" -> "0x00115340" [color="#13a10e"];
        "0x001152dd" -> "0x001152f0" [color="#c50f1f"];
        "0x001152f0" -> "0x001153b1" [color="#0037da"];
        "0x00115340" -> "0x0011534d" [color="#0037da"];
        "0x0011534d" -> "0x001153a1" [color="#0037da"];
        "0x0011536b" -> "0x001153a1" [color="#0037da"];
        "0x001153a1" -> "0x0011536b" [color="#13a10e"];
        "0x001153a1" -> "0x001153ac" [color="#c50f1f"];
        "0x001153ac" -> "0x001153b1" [color="#0037da"];
}
