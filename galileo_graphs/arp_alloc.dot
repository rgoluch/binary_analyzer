digraph code {
	graph [bgcolor=azure fontsize=8 fontname="Courier" splines="ortho"];
	node [fillcolor=gray style=filled shape=box];
	edge [arrowhead="normal"];
	"0x0010dfd5" [URL="sym.arp_alloc/0x0010dfd5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="  ; CALL XREF from sym.arp_resolve @ 0x10db20\l  ; CALL XREF from sym.arp_in @ 0x10de56\l226: sym.arp_alloc ();\l; var int32_t var_ch @ ebp-0xc\l; var int32_t var_4h @ ebp-0x4\l0x0010dfd5      push ebp\l0x0010dfd6      mov ebp, esp\l0x0010dfd8      push ebx\l0x0010dfd9      sub esp, 0x14\l0x0010dfdc      call sym.__x86.get_pc_thunk.ax\l0x0010dfe1      add eax, 0x1301f\l0x0010dfe6      mov dword [var_ch], 0\l0x0010dfed      jmp 0x10e039\l"]
	"0x0010dfef" [URL="sym.arp_alloc/0x0010dfef", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.arp_alloc @ 0x10e03d\l0x0010dfef      mov ebx, obj.arpcache                                  ; 0x13fe20\l0x0010dff5      mov ecx, dword [var_ch]\l0x0010dff8      mov edx, ecx\l0x0010dffa      shl edx, 2\l0x0010dffd      add edx, ecx\l0x0010dfff      shl edx, 2\l0x0010e002      add edx, ebx\l0x0010e004      mov edx, dword [edx]\l0x0010e006      test edx, edx\l0x0010e008      jne 0x10e036\l"]
	"0x0010e00a" [URL="sym.arp_alloc/0x0010e00a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010e00a      mov ecx, dword [var_ch]\l0x0010e00d      mov edx, ecx\l0x0010e00f      shl edx, 2\l0x0010e012      add edx, ecx\l0x0010e014      shl edx, 2\l0x0010e017      mov ecx, obj.arpcache                                  ; 0x13fe20\l0x0010e01d      add edx, ecx\l0x0010e01f      sub esp, 4\l0x0010e022      push 0x14                                              ; 20\l0x0010e024      push 0\l0x0010e026      push edx\l0x0010e027      mov ebx, eax\l0x0010e029      call sym.memset                                        ; void *memset(void *s, int c, size_t n)\l0x0010e02e      add esp, 0x10\l0x0010e031      mov eax, dword [var_ch]\l0x0010e034      jmp 0x10e0b2\l"]
	"0x0010e036" [URL="sym.arp_alloc/0x0010e036", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.arp_alloc @ 0x10e008\l0x0010e036      inc dword [var_ch]\l"]
	"0x0010e039" [URL="sym.arp_alloc/0x0010e039", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.arp_alloc @ 0x10dfed\l0x0010e039      cmp dword [var_ch], 0xf\l0x0010e03d      jle 0x10dfef\l"]
	"0x0010e03f" [URL="sym.arp_alloc/0x0010e03f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010e03f      mov dword [var_ch], 0\l0x0010e046      jmp 0x10e093\l"]
	"0x0010e048" [URL="sym.arp_alloc/0x0010e048", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.arp_alloc @ 0x10e097\l0x0010e048      mov ebx, obj.arpcache                                  ; 0x13fe20\l0x0010e04e      mov ecx, dword [var_ch]\l0x0010e051      mov edx, ecx\l0x0010e053      shl edx, 2\l0x0010e056      add edx, ecx\l0x0010e058      shl edx, 2\l0x0010e05b      add edx, ebx\l0x0010e05d      mov edx, dword [edx]\l0x0010e05f      cmp edx, 2                                             ; 2\l0x0010e062      jne 0x10e090\l"]
	"0x0010e064" [URL="sym.arp_alloc/0x0010e064", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010e064      mov ecx, dword [var_ch]\l0x0010e067      mov edx, ecx\l0x0010e069      shl edx, 2\l0x0010e06c      add edx, ecx\l0x0010e06e      shl edx, 2\l0x0010e071      mov ecx, obj.arpcache                                  ; 0x13fe20\l0x0010e077      add edx, ecx\l0x0010e079      sub esp, 4\l0x0010e07c      push 0x14                                              ; 20\l0x0010e07e      push 0\l0x0010e080      push edx\l0x0010e081      mov ebx, eax\l0x0010e083      call sym.memset                                        ; void *memset(void *s, int c, size_t n)\l0x0010e088      add esp, 0x10\l0x0010e08b      mov eax, dword [var_ch]\l0x0010e08e      jmp 0x10e0b2\l"]
	"0x0010e090" [URL="sym.arp_alloc/0x0010e090", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.arp_alloc @ 0x10e062\l0x0010e090      inc dword [var_ch]\l"]
	"0x0010e093" [URL="sym.arp_alloc/0x0010e093", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.arp_alloc @ 0x10e046\l0x0010e093      cmp dword [var_ch], 0xf\l0x0010e097      jle 0x10e048\l"]
	"0x0010e099" [URL="sym.arp_alloc/0x0010e099", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010e099      sub esp, 0xc\l0x0010e09c      lea edx, [eax - 0x815f]\l0x0010e0a2      push edx\l0x0010e0a3      mov ebx, eax\l0x0010e0a5      call sym.kprintf\l0x0010e0aa      add esp, 0x10\l0x0010e0ad      mov eax, 0xffffffff                                    ; -1\l"]
	"0x0010e0b2" [URL="sym.arp_alloc/0x0010e0b2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from sym.arp_alloc @ 0x10e034, 0x10e08e\l0x0010e0b2      mov ebx, dword [var_4h]\l0x0010e0b5      leave\l0x0010e0b6      ret\l"]
        "0x0010dfd5" -> "0x0010e039" [color="#0037da"];
        "0x0010dfef" -> "0x0010e036" [color="#13a10e"];
        "0x0010dfef" -> "0x0010e00a" [color="#c50f1f"];
        "0x0010e00a" -> "0x0010e0b2" [color="#0037da"];
        "0x0010e036" -> "0x0010e039" [color="#0037da"];
        "0x0010e039" -> "0x0010dfef" [color="#13a10e"];
        "0x0010e039" -> "0x0010e03f" [color="#c50f1f"];
        "0x0010e03f" -> "0x0010e093" [color="#0037da"];
        "0x0010e048" -> "0x0010e090" [color="#13a10e"];
        "0x0010e048" -> "0x0010e064" [color="#c50f1f"];
        "0x0010e064" -> "0x0010e0b2" [color="#0037da"];
        "0x0010e090" -> "0x0010e093" [color="#0037da"];
        "0x0010e093" -> "0x0010e048" [color="#13a10e"];
        "0x0010e093" -> "0x0010e099" [color="#c50f1f"];
        "0x0010e099" -> "0x0010e0b2" [color="#0037da"];
}
