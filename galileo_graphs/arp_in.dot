digraph code {
	graph [bgcolor=azure fontsize=8 fontname="Courier" splines="ortho"];
	node [fillcolor=gray style=filled shape=box];
	edge [arrowhead="normal"];
	"0x0010dcf3" [URL="sym.arp_in/0x0010dcf3", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="  ; CALL XREF from sym.netin @ 0x110ccc\l738: sym.arp_in (int32_t arg_8h);\l; var int32_t var_42h @ ebp-0x42\l; var int32_t var_36h @ ebp-0x36\l; var int32_t var_34h @ ebp-0x34\l; var int32_t var_32h @ ebp-0x32\l; var int32_t var_30h @ ebp-0x30\l; var int32_t var_2fh @ ebp-0x2f\l; var int32_t var_2eh @ ebp-0x2e\l; var int32_t var_26h @ ebp-0x26\l; var int32_t var_1ch @ ebp-0x1c\l; var int32_t var_18h @ ebp-0x18\l; var int32_t var_11h @ ebp-0x11\l; var int32_t var_10h @ ebp-0x10\l; var int32_t var_ch @ ebp-0xc\l; var int32_t var_4h @ ebp-0x4\l; arg int32_t arg_8h @ ebp+0x8\l0x0010dcf3      push ebp\l0x0010dcf4      mov ebp, esp\l0x0010dcf6      push ebx\l0x0010dcf7      sub esp, 0x44\l0x0010dcfa      call sym.__x86.get_pc_thunk.bx\l0x0010dcff      add ebx, 0x13301\l0x0010dd05      sub esp, 0xc\l0x0010dd08      push dword [arg_8h]\l0x0010dd0b      call sym.arp_ntoh\l0x0010dd10      add esp, 0x10\l0x0010dd13      mov eax, dword [arg_8h]\l0x0010dd16      mov ax, word [eax + 0xe]\l0x0010dd1a      cmp ax, 1                                              ; 1\l0x0010dd1e      jne 0x10dd2d\l"]
	"0x0010dd20" [URL="sym.arp_in/0x0010dd20", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010dd20      mov eax, dword [arg_8h]\l0x0010dd23      mov ax, word [eax + 0x10]\l0x0010dd27      cmp ax, 0x800                                          ; 2048\l0x0010dd2b      je 0x10dd40\l"]
	"0x0010dd2d" [URL="sym.arp_in/0x0010dd2d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.arp_in @ 0x10dd1e\l0x0010dd2d      sub esp, 0xc\l0x0010dd30      push dword [arg_8h]\l0x0010dd33      call sym.freebuf\l0x0010dd38      add esp, 0x10\l0x0010dd3b      jmp 0x10dfd0\l"]
	"0x0010dd40" [URL="sym.arp_in/0x0010dd40", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.arp_in @ 0x10dd2b\l0x0010dd40      call loc.disable\l0x0010dd45      mov dword [var_18h], eax\l0x0010dd48      mov byte [var_11h], 0\l0x0010dd4c      mov dword [var_ch], 0\l0x0010dd53      jmp 0x10dd90\l"]
	"0x0010dd55" [URL="sym.arp_in/0x0010dd55", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.arp_in @ 0x10dd94\l0x0010dd55      mov edx, dword [var_ch]\l0x0010dd58      mov eax, edx\l0x0010dd5a      shl eax, 2\l0x0010dd5d      add eax, edx\l0x0010dd5f      shl eax, 2\l0x0010dd62      mov edx, obj.arpcache                                  ; 0x13fe20\l0x0010dd68      add eax, edx\l0x0010dd6a      mov dword [var_10h], eax\l0x0010dd6d      mov eax, dword [var_10h]\l0x0010dd70      mov eax, dword [eax]\l0x0010dd72      test eax, eax\l0x0010dd74      je 0x10dd8c\l"]
	"0x0010dd76" [URL="sym.arp_in/0x0010dd76", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010dd76      mov eax, dword [var_10h]\l0x0010dd79      mov edx, dword [eax + 4]\l0x0010dd7c      mov eax, dword [arg_8h]\l0x0010dd7f      mov eax, dword [eax + 0x1c]\l0x0010dd82      cmp edx, eax\l0x0010dd84      jne 0x10dd8d\l"]
	"0x0010dd86" [URL="sym.arp_in/0x0010dd86", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010dd86      mov byte [var_11h], 1\l0x0010dd8a      jmp 0x10dd96\l"]
	"0x0010dd8c" [URL="sym.arp_in/0x0010dd8c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.arp_in @ 0x10dd74\l0x0010dd8c      nop\l"]
	"0x0010dd8d" [URL="sym.arp_in/0x0010dd8d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.arp_in @ 0x10dd84\l0x0010dd8d      inc dword [var_ch]\l"]
	"0x0010dd90" [URL="sym.arp_in/0x0010dd90", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.arp_in @ 0x10dd53\l0x0010dd90      cmp dword [var_ch], 0xf\l0x0010dd94      jle 0x10dd55\l"]
	"0x0010dd96" [URL="sym.arp_in/0x0010dd96", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.arp_in @ 0x10dd8a\l0x0010dd96      cmp byte [var_11h], 0\l0x0010dd9a      je 0x10ddde\l"]
	"0x0010dd9c" [URL="sym.arp_in/0x0010dd9c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010dd9c      mov eax, dword [arg_8h]\l0x0010dd9f      lea edx, [eax + 0x16]\l0x0010dda2      mov eax, dword [var_10h]\l0x0010dda5      add eax, 0xc                                           ; 12\l0x0010dda8      sub esp, 4\l0x0010ddab      push 6                                                 ; 6\l0x0010ddad      push edx\l0x0010ddae      push eax\l0x0010ddaf      call sym.memcpy                                        ; void *memcpy(void *s1, const void *s2, size_t n)\l0x0010ddb4      add esp, 0x10\l0x0010ddb7      mov eax, dword [var_10h]\l0x0010ddba      mov eax, dword [eax]\l0x0010ddbc      cmp eax, 1                                             ; 1\l0x0010ddbf      jne 0x10ddde\l"]
	"0x0010ddc1" [URL="sym.arp_in/0x0010ddc1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010ddc1      mov eax, dword [var_10h]\l0x0010ddc4      mov dword [eax], 2\l0x0010ddca      mov eax, dword [var_10h]\l0x0010ddcd      mov eax, dword [eax + 8]\l0x0010ddd0      sub esp, 8\l0x0010ddd3      push 1                                                 ; 1\l0x0010ddd5      push eax\l0x0010ddd6      call sym.send                                          ; ssize_t send(int socket, void *buffer, size_t length, int flags)\l0x0010dddb      add esp, 0x10\l"]
	"0x0010ddde" [URL="sym.arp_in/0x0010ddde", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from sym.arp_in @ 0x10dd9a, 0x10ddbf\l0x0010ddde      mov eax, dword [arg_8h]\l0x0010dde1      mov ax, word [eax + 0x14]\l0x0010dde5      cmp ax, 2                                              ; 2\l0x0010dde9      jne 0x10de0c\l"]
	"0x0010ddeb" [URL="sym.arp_in/0x0010ddeb", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010ddeb      sub esp, 0xc\l0x0010ddee      push dword [arg_8h]\l0x0010ddf1      call sym.freebuf\l0x0010ddf6      add esp, 0x10\l0x0010ddf9      sub esp, 0xc\l0x0010ddfc      push dword [var_18h]\l0x0010ddff      call loc.restore\l0x0010de04      add esp, 0x10\l0x0010de07      jmp 0x10dfd0\l"]
	"0x0010de0c" [URL="sym.arp_in/0x0010de0c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.arp_in @ 0x10dde9\l0x0010de0c      mov eax, obj.NetData                                   ; 0x140200\l0x0010de12      mov al, byte [eax + 0x20]\l0x0010de15      test al, al\l0x0010de17      je 0x10de2b\l"]
	"0x0010de19" [URL="sym.arp_in/0x0010de19", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010de19      mov eax, dword [arg_8h]\l0x0010de1c      mov edx, dword [eax + 0x26]\l0x0010de1f      mov eax, obj.NetData                                   ; 0x140200\l0x0010de25      mov eax, dword [eax]\l0x0010de27      cmp edx, eax\l0x0010de29      je 0x10de4c\l"]
	"0x0010de2b" [URL="sym.arp_in/0x0010de2b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.arp_in @ 0x10de17\l0x0010de2b      sub esp, 0xc\l0x0010de2e      push dword [arg_8h]\l0x0010de31      call sym.freebuf\l0x0010de36      add esp, 0x10\l0x0010de39      sub esp, 0xc\l0x0010de3c      push dword [var_18h]\l0x0010de3f      call loc.restore\l0x0010de44      add esp, 0x10\l0x0010de47      jmp 0x10dfd0\l"]
	"0x0010de4c" [URL="sym.arp_in/0x0010de4c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.arp_in @ 0x10de29\l0x0010de4c      cmp byte [var_11h], 0\l0x0010de50      jne 0x10dedf\l"]
	"0x0010de56" [URL="sym.arp_in/0x0010de56", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010de56      call sym.arp_alloc\l0x0010de5b      mov dword [var_ch], eax\l0x0010de5e      cmp dword [var_ch], 0xffffffff\l0x0010de62      jne 0x10de97\l"]
	"0x0010de64" [URL="sym.arp_in/0x0010de64", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010de64      sub esp, 0xc\l0x0010de67      lea eax, [ebx - 0x8180]\l0x0010de6d      push eax\l0x0010de6e      call sym.kprintf\l0x0010de73      add esp, 0x10\l0x0010de76      sub esp, 0xc\l0x0010de79      push dword [arg_8h]\l0x0010de7c      call sym.freebuf\l0x0010de81      add esp, 0x10\l0x0010de84      sub esp, 0xc\l0x0010de87      push dword [var_18h]\l0x0010de8a      call loc.restore\l0x0010de8f      add esp, 0x10\l0x0010de92      jmp 0x10dfd0\l"]
	"0x0010de97" [URL="sym.arp_in/0x0010de97", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.arp_in @ 0x10de62\l0x0010de97      mov edx, dword [var_ch]\l0x0010de9a      mov eax, edx\l0x0010de9c      shl eax, 2\l0x0010de9f      add eax, edx\l0x0010dea1      shl eax, 2\l0x0010dea4      mov edx, obj.arpcache                                  ; 0x13fe20\l0x0010deaa      add eax, edx\l0x0010deac      mov dword [var_10h], eax\l0x0010deaf      mov eax, dword [arg_8h]\l0x0010deb2      mov edx, dword [eax + 0x1c]\l0x0010deb5      mov eax, dword [var_10h]\l0x0010deb8      mov dword [eax + 4], edx\l0x0010debb      mov eax, dword [arg_8h]\l0x0010debe      lea edx, [eax + 0x16]\l0x0010dec1      mov eax, dword [var_10h]\l0x0010dec4      add eax, 0xc                                           ; 12\l0x0010dec7      sub esp, 4\l0x0010deca      push 6                                                 ; 6\l0x0010decc      push edx\l0x0010decd      push eax\l0x0010dece      call sym.memcpy                                        ; void *memcpy(void *s1, const void *s2, size_t n)\l0x0010ded3      add esp, 0x10\l0x0010ded6      mov eax, dword [var_10h]\l0x0010ded9      mov dword [eax], 2\l"]
	"0x0010dedf" [URL="sym.arp_in/0x0010dedf", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.arp_in @ 0x10de50\l0x0010dedf      mov eax, dword [arg_8h]\l0x0010dee2      add eax, 0x16                                          ; 22\l0x0010dee5      sub esp, 4\l0x0010dee8      push 6                                                 ; 6\l0x0010deea      push eax\l0x0010deeb      lea eax, [var_42h]\l0x0010deee      push eax\l0x0010deef      call sym.memcpy                                        ; void *memcpy(void *s1, const void *s2, size_t n)\l0x0010def4      add esp, 0x10\l0x0010def7      sub esp, 4\l0x0010defa      push 6                                                 ; 6\l0x0010defc      mov eax, obj.NetData                                   ; 0x140200\l0x0010df02      lea eax, [eax + 0x21]\l0x0010df05      push eax\l0x0010df06      lea eax, [var_42h]\l0x0010df09      add eax, 6\l0x0010df0c      push eax\l0x0010df0d      call sym.memcpy                                        ; void *memcpy(void *s1, const void *s2, size_t n)\l0x0010df12      add esp, 0x10\l0x0010df15      mov word [var_36h], 0x806                              ; 2054\l0x0010df1b      mov word [var_34h], 1\l0x0010df21      mov word [var_32h], 0x800                              ; 2048\l0x0010df27      mov byte [var_30h], 6\l0x0010df2b      mov byte [var_2fh], 4\l0x0010df2f      mov word [var_2eh], 2\l0x0010df35      sub esp, 4\l0x0010df38      push 6                                                 ; 6\l0x0010df3a      mov eax, obj.NetData                                   ; 0x140200\l0x0010df40      lea eax, [eax + 0x21]\l0x0010df43      push eax\l0x0010df44      lea eax, [var_42h]\l0x0010df47      add eax, 0x16                                          ; 22\l0x0010df4a      push eax\l0x0010df4b      call sym.memcpy                                        ; void *memcpy(void *s1, const void *s2, size_t n)\l0x0010df50      add esp, 0x10\l0x0010df53      mov eax, obj.NetData                                   ; 0x140200\l0x0010df59      mov eax, dword [eax]\l0x0010df5b      mov dword [var_26h], eax\l0x0010df5e      mov eax, dword [arg_8h]\l0x0010df61      add eax, 0x16                                          ; 22\l0x0010df64      sub esp, 4\l0x0010df67      push 6                                                 ; 6\l0x0010df69      push eax\l0x0010df6a      lea eax, [var_42h]\l0x0010df6d      add eax, 0x20                                          ; loc.EOI\l0x0010df70      push eax\l0x0010df71      call sym.memcpy                                        ; void *memcpy(void *s1, const void *s2, size_t n)\l0x0010df76      add esp, 0x10\l0x0010df79      mov eax, dword [arg_8h]\l0x0010df7c      mov eax, dword [eax + 0x1c]\l0x0010df7f      mov dword [var_1ch], eax\l0x0010df82      sub esp, 0xc\l0x0010df85      lea eax, [var_42h]\l0x0010df88      push eax\l0x0010df89      call sym.arp_hton\l0x0010df8e      add esp, 0x10\l0x0010df91      sub esp, 0xc\l0x0010df94      lea eax, [var_42h]\l0x0010df97      push eax\l0x0010df98      call sym.eth_hton\l0x0010df9d      add esp, 0x10\l0x0010dfa0      sub esp, 4\l0x0010dfa3      push 0x2a                                              ; '*' ; 42\l0x0010dfa5      lea eax, [var_42h]\l0x0010dfa8      push eax\l0x0010dfa9      push 2                                                 ; 2\l0x0010dfab      call sym.write                                         ; ssize_t write(int fd, const char *ptr, size_t nbytes)\l0x0010dfb0      add esp, 0x10\l0x0010dfb3      sub esp, 0xc\l0x0010dfb6      push dword [arg_8h]\l0x0010dfb9      call sym.freebuf\l0x0010dfbe      add esp, 0x10\l0x0010dfc1      sub esp, 0xc\l0x0010dfc4      push dword [var_18h]\l0x0010dfc7      call loc.restore\l0x0010dfcc      add esp, 0x10\l0x0010dfcf      nop\l"]
	"0x0010dfd0" [URL="sym.arp_in/0x0010dfd0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from sym.arp_in @ 0x10dd3b, 0x10de07, 0x10de47, 0x10de92\l0x0010dfd0      mov ebx, dword [var_4h]\l0x0010dfd3      leave\l0x0010dfd4      ret\l"]
        "0x0010dcf3" -> "0x0010dd2d" [color="#13a10e"];
        "0x0010dcf3" -> "0x0010dd20" [color="#c50f1f"];
        "0x0010dd20" -> "0x0010dd40" [color="#13a10e"];
        "0x0010dd20" -> "0x0010dd2d" [color="#c50f1f"];
        "0x0010dd2d" -> "0x0010dfd0" [color="#0037da"];
        "0x0010dd40" -> "0x0010dd90" [color="#0037da"];
        "0x0010dd55" -> "0x0010dd8c" [color="#13a10e"];
        "0x0010dd55" -> "0x0010dd76" [color="#c50f1f"];
        "0x0010dd76" -> "0x0010dd8d" [color="#13a10e"];
        "0x0010dd76" -> "0x0010dd86" [color="#c50f1f"];
        "0x0010dd86" -> "0x0010dd96" [color="#0037da"];
        "0x0010dd8c" -> "0x0010dd8d" [color="#0037da"];
        "0x0010dd8d" -> "0x0010dd90" [color="#0037da"];
        "0x0010dd90" -> "0x0010dd55" [color="#13a10e"];
        "0x0010dd90" -> "0x0010dd96" [color="#c50f1f"];
        "0x0010dd96" -> "0x0010ddde" [color="#13a10e"];
        "0x0010dd96" -> "0x0010dd9c" [color="#c50f1f"];
        "0x0010dd9c" -> "0x0010ddde" [color="#13a10e"];
        "0x0010dd9c" -> "0x0010ddc1" [color="#c50f1f"];
        "0x0010ddc1" -> "0x0010ddde" [color="#0037da"];
        "0x0010ddde" -> "0x0010de0c" [color="#13a10e"];
        "0x0010ddde" -> "0x0010ddeb" [color="#c50f1f"];
        "0x0010ddeb" -> "0x0010dfd0" [color="#0037da"];
        "0x0010de0c" -> "0x0010de2b" [color="#13a10e"];
        "0x0010de0c" -> "0x0010de19" [color="#c50f1f"];
        "0x0010de19" -> "0x0010de4c" [color="#13a10e"];
        "0x0010de19" -> "0x0010de2b" [color="#c50f1f"];
        "0x0010de2b" -> "0x0010dfd0" [color="#0037da"];
        "0x0010de4c" -> "0x0010dedf" [color="#13a10e"];
        "0x0010de4c" -> "0x0010de56" [color="#c50f1f"];
        "0x0010de56" -> "0x0010de97" [color="#13a10e"];
        "0x0010de56" -> "0x0010de64" [color="#c50f1f"];
        "0x0010de64" -> "0x0010dfd0" [color="#0037da"];
        "0x0010de97" -> "0x0010dedf" [color="#0037da"];
        "0x0010dedf" -> "0x0010dfd0" [color="#0037da"];
}
