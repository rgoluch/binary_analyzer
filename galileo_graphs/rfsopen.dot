digraph code {
	graph [bgcolor=azure fontsize=8 fontname="Courier" splines="ortho"];
	node [fillcolor=gray style=filled shape=box];
	edge [arrowhead="normal"];
	"0x0010d732" [URL="sym.rfsopen/0x0010d732", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="653: sym.rfsopen (int32_t arg_ch, int32_t arg_10h);\l; var int32_t var_138h @ ebp-0x138\l; var int32_t var_136h @ ebp-0x136\l; var int32_t var_ach @ ebp-0xac\l; var int32_t var_aah @ ebp-0xaa\l; var int32_t var_a8h @ ebp-0xa8\l; var int32_t var_24h @ ebp-0x24\l; var int32_t var_20h @ ebp-0x20\l; var int32_t var_1ch @ ebp-0x1c\l; var int32_t var_18h @ ebp-0x18\l; var int32_t var_14h @ ebp-0x14\l; var int32_t var_10h @ ebp-0x10\l; var int32_t var_ch @ ebp-0xc\l; arg int32_t arg_ch @ ebp+0xc\l; arg int32_t arg_10h @ ebp+0x10\l; var int32_t var_148h @ esp+0x4\l; var int32_t var_144h @ esp+0x8\l; var int32_t var_140h @ esp+0xc\l0x0010d732      push ebp\l0x0010d733      mov ebp, esp\l0x0010d735      sub esp, 0x148\l0x0010d73b      mov eax, dword [0x13fe10]                              ; [0x13fe10:4]=0\l0x0010d740      mov dword [esp], eax\l0x0010d743      call sym.wait                                          ; pid_t wait(int *wstatus)\l0x0010d748      mov dword [var_1ch], 0\l0x0010d74f      jmp 0x10d774\l"]
	"0x0010d751" [URL="sym.rfsopen/0x0010d751", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rfsopen @ 0x10d778\l0x0010d751      mov edx, dword [var_1ch]\l0x0010d754      mov eax, edx\l0x0010d756      shl eax, 3\l0x0010d759      add eax, edx\l0x0010d75b      shl eax, 4\l0x0010d75e      add eax, obj.rfltab                                    ; 0x13f860\l0x0010d763      mov dword [var_ch], eax\l0x0010d766      mov eax, dword [var_ch]\l0x0010d769      mov eax, dword [eax]\l0x0010d76b      test eax, eax\l0x0010d76d      jne 0x10d771\l"]
	"0x0010d76f" [URL="sym.rfsopen/0x0010d76f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010d76f      jmp 0x10d77a\l"]
	"0x0010d771" [URL="sym.rfsopen/0x0010d771", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rfsopen @ 0x10d76d\l0x0010d771      inc dword [var_1ch]\l"]
	"0x0010d774" [URL="sym.rfsopen/0x0010d774", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rfsopen @ 0x10d74f\l0x0010d774      cmp dword [var_1ch], 9\l0x0010d778      jle 0x10d751\l"]
	"0x0010d77a" [URL="sym.rfsopen/0x0010d77a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rfsopen @ 0x10d76f\l0x0010d77a      cmp dword [var_1ch], 9\l0x0010d77e      jle 0x10d797\l"]
	"0x0010d780" [URL="sym.rfsopen/0x0010d780", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010d780      mov eax, dword [0x13fe10]                              ; [0x13fe10:4]=0\l0x0010d785      mov dword [esp], eax\l0x0010d788      call sym.signal                                        ; void signal(int sig, void *func)\l0x0010d78d      mov eax, 0xffffffff                                    ; -1\l0x0010d792      jmp 0x10d9bd\l"]
	"0x0010d797" [URL="sym.rfsopen/0x0010d797", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rfsopen @ 0x10d77e\l0x0010d797      mov eax, dword [arg_ch]\l0x0010d79a      mov dword [var_14h], eax\l0x0010d79d      mov eax, dword [var_ch]\l0x0010d7a0      add eax, 8\l0x0010d7a3      mov dword [var_18h], eax\l0x0010d7a6      mov dword [var_10h], 0\l0x0010d7ad      jmp 0x10d7cf\l"]
	"0x0010d7af" [URL="sym.rfsopen/0x0010d7af", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rfsopen @ 0x10d7e9\l0x0010d7af      inc dword [var_10h]\l0x0010d7b2      cmp dword [var_10h], 0x7f\l0x0010d7b6      jle 0x10d7cf\l"]
	"0x0010d7b8" [URL="sym.rfsopen/0x0010d7b8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010d7b8      mov eax, dword [0x13fe10]                              ; [0x13fe10:4]=0\l0x0010d7bd      mov dword [esp], eax\l0x0010d7c0      call sym.signal                                        ; void signal(int sig, void *func)\l0x0010d7c5      mov eax, 0xffffffff                                    ; -1\l0x0010d7ca      jmp 0x10d9bd\l"]
	"0x0010d7cf" [URL="sym.rfsopen/0x0010d7cf", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from sym.rfsopen @ 0x10d7ad, 0x10d7b6\l0x0010d7cf      mov eax, dword [var_18h]\l0x0010d7d2      lea edx, [eax + 1]\l0x0010d7d5      mov dword [var_18h], edx\l0x0010d7d8      mov edx, dword [var_14h]\l0x0010d7db      lea ecx, [edx + 1]\l0x0010d7de      mov dword [var_14h], ecx\l0x0010d7e1      mov dl, byte [edx]\l0x0010d7e3      mov byte [eax], dl\l0x0010d7e5      mov al, byte [eax]\l0x0010d7e7      test al, al\l0x0010d7e9      jne 0x10d7af\l"]
	"0x0010d7eb" [URL="sym.rfsopen/0x0010d7eb", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010d7eb      cmp dword [var_10h], 0\l0x0010d7ef      jne 0x10d808\l"]
	"0x0010d7f1" [URL="sym.rfsopen/0x0010d7f1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010d7f1      mov eax, dword [0x13fe10]                              ; [0x13fe10:4]=0\l0x0010d7f6      mov dword [esp], eax\l0x0010d7f9      call sym.signal                                        ; void signal(int sig, void *func)\l0x0010d7fe      mov eax, 0xffffffff                                    ; -1\l0x0010d803      jmp 0x10d9bd\l"]
	"0x0010d808" [URL="sym.rfsopen/0x0010d808", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rfsopen @ 0x10d7ef\l0x0010d808      mov eax, dword [arg_10h]\l0x0010d80b      mov dword [esp], eax\l0x0010d80e      call sym.rfsgetmode\l0x0010d813      mov edx, eax\l0x0010d815      mov eax, dword [var_ch]\l0x0010d818      mov dword [eax + 0x8c], edx\l0x0010d81e      mov eax, dword [var_ch]\l0x0010d821      mov eax, dword [eax + 0x8c]\l0x0010d827      cmp eax, 0xffffffff\l0x0010d82a      jne 0x10d843\l"]
	"0x0010d82c" [URL="sym.rfsopen/0x0010d82c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010d82c      mov eax, dword [0x13fe10]                              ; [0x13fe10:4]=0\l0x0010d831      mov dword [esp], eax\l0x0010d834      call sym.signal                                        ; void signal(int sig, void *func)\l0x0010d839      mov eax, 0xffffffff                                    ; -1\l0x0010d83e      jmp 0x10d9bd\l"]
	"0x0010d843" [URL="sym.rfsopen/0x0010d843", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rfsopen @ 0x10d82a\l0x0010d843      mov word [var_ach], 0x300                              ; 768\l0x0010d84c      mov word [var_aah], 0\l0x0010d855      mov dword [var_a8h], 0\l0x0010d85f      lea eax, [var_ach]\l0x0010d865      add eax, 8\l0x0010d868      mov dword [var_14h], eax\l0x0010d86b      mov dword [var_144h], 0x80                             ; [0x80:4]=-1 ; 128\l0x0010d873      mov dword [var_148h], 0\l0x0010d87b      mov eax, dword [var_14h]\l0x0010d87e      mov dword [esp], eax\l0x0010d881      call sym.memset                                        ; void *memset(void *s, int c, size_t n)\l0x0010d886      nop\l"]
	"0x0010d887" [URL="sym.rfsopen/0x0010d887", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rfsopen @ 0x10d8a1\l0x0010d887      mov eax, dword [var_14h]\l0x0010d88a      lea edx, [eax + 1]\l0x0010d88d      mov dword [var_14h], edx\l0x0010d890      mov edx, dword [arg_ch]\l0x0010d893      lea ecx, [edx + 1]\l0x0010d896      mov dword [arg_ch], ecx\l0x0010d899      mov dl, byte [edx]\l0x0010d89b      mov byte [eax], dl\l0x0010d89d      mov al, byte [eax]\l0x0010d89f      test al, al\l0x0010d8a1      jne 0x10d887\l"]
	"0x0010d8a3" [URL="sym.rfsopen/0x0010d8a3", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010d8a3      mov eax, dword [var_ch]\l0x0010d8a6      mov eax, dword [eax + 0x8c]\l0x0010d8ac      shr eax, 0x18\l0x0010d8af      mov edx, eax\l0x0010d8b1      mov eax, dword [var_ch]\l0x0010d8b4      mov eax, dword [eax + 0x8c]\l0x0010d8ba      shr eax, 8\l0x0010d8bd      and eax, 0xff00\l0x0010d8c2      or edx, eax\l0x0010d8c4      mov eax, dword [var_ch]\l0x0010d8c7      mov eax, dword [eax + 0x8c]\l0x0010d8cd      shl eax, 8\l0x0010d8d0      and eax, 0xff0000\l0x0010d8d5      or edx, eax\l0x0010d8d7      mov eax, dword [var_ch]\l0x0010d8da      mov eax, dword [eax + 0x8c]\l0x0010d8e0      shl eax, 0x18\l0x0010d8e3      or eax, edx\l0x0010d8e5      mov dword [var_24h], eax\l0x0010d8e8      mov dword [var_140h], 0x8c                             ; [0x8c:4]=-1 ; 140\l0x0010d8f0      lea eax, [var_138h]\l0x0010d8f6      mov dword [var_144h], eax\l0x0010d8fa      mov dword [var_148h], 0x8c                             ; [0x8c:4]=-1 ; 140\l0x0010d902      lea eax, [var_ach]\l0x0010d908      mov dword [esp], eax\l0x0010d90b      call sym.rfscomm\l0x0010d910      mov dword [var_20h], eax\l0x0010d913      cmp dword [var_20h], 0xffffffff\l0x0010d917      jne 0x10d930\l"]
	"0x0010d919" [URL="sym.rfsopen/0x0010d919", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010d919      mov eax, dword [0x13fe10]                              ; [0x13fe10:4]=0\l0x0010d91e      mov dword [esp], eax\l0x0010d921      call sym.signal                                        ; void signal(int sig, void *func)\l0x0010d926      mov eax, 0xffffffff                                    ; -1\l0x0010d92b      jmp 0x10d9bd\l"]
	"0x0010d930" [URL="sym.rfsopen/0x0010d930", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rfsopen @ 0x10d917\l0x0010d930      cmp dword [var_20h], 0xfffffffd\l0x0010d934      jne 0x10d956\l"]
	"0x0010d936" [URL="sym.rfsopen/0x0010d936", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010d936      mov dword [esp], 0x118e5c                              ; [0x118e5c:4]=0x656d6954 ; \"Timeout during remote file open\\n\\r\"\l0x0010d93d      call sym.kprintf\l0x0010d942      mov eax, dword [0x13fe10]                              ; [0x13fe10:4]=0\l0x0010d947      mov dword [esp], eax\l0x0010d94a      call sym.signal                                        ; void signal(int sig, void *func)\l0x0010d94f      mov eax, 0xffffffff                                    ; -1\l0x0010d954      jmp 0x10d9bd\l"]
	"0x0010d956" [URL="sym.rfsopen/0x0010d956", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rfsopen @ 0x10d934\l0x0010d956      mov ax, word [var_136h]\l0x0010d95d      shr ax, 8\l0x0010d961      xor edx, edx\l0x0010d963      mov dx, ax\l0x0010d966      mov ax, word [var_136h]\l0x0010d96d      and eax, 0xffff\l0x0010d972      shl eax, 8\l0x0010d975      and eax, 0xffff\l0x0010d97a      or eax, edx\l0x0010d97c      test eax, eax\l0x0010d97e      je 0x10d994\l"]
	"0x0010d980" [URL="sym.rfsopen/0x0010d980", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010d980      mov eax, dword [0x13fe10]                              ; [0x13fe10:4]=0\l0x0010d985      mov dword [esp], eax\l0x0010d988      call sym.signal                                        ; void signal(int sig, void *func)\l0x0010d98d      mov eax, 0xffffffff                                    ; -1\l0x0010d992      jmp 0x10d9bd\l"]
	"0x0010d994" [URL="sym.rfsopen/0x0010d994", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.rfsopen @ 0x10d97e\l0x0010d994      mov eax, dword [var_ch]\l0x0010d997      mov dword [eax + 0x88], 0\l0x0010d9a1      mov eax, dword [var_ch]\l0x0010d9a4      mov dword [eax], 1\l0x0010d9aa      mov eax, dword [0x13fe10]                              ; [0x13fe10:4]=0\l0x0010d9af      mov dword [esp], eax\l0x0010d9b2      call sym.signal                                        ; void signal(int sig, void *func)\l0x0010d9b7      mov eax, dword [var_ch]\l0x0010d9ba      mov eax, dword [eax + 4]\l"]
	"0x0010d9bd" [URL="sym.rfsopen/0x0010d9bd", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; XREFS: CODE 0x0010d792  CODE 0x0010d7ca  CODE 0x0010d803  \l; XREFS: CODE 0x0010d83e  CODE 0x0010d92b  CODE 0x0010d954  \l; XREFS: CODE 0x0010d992  \l0x0010d9bd      leave\l0x0010d9be      ret\l"]
        "0x0010d732" -> "0x0010d774" [color="#0037da"];
        "0x0010d751" -> "0x0010d771" [color="#13a10e"];
        "0x0010d751" -> "0x0010d76f" [color="#c50f1f"];
        "0x0010d76f" -> "0x0010d77a" [color="#0037da"];
        "0x0010d771" -> "0x0010d774" [color="#0037da"];
        "0x0010d774" -> "0x0010d751" [color="#13a10e"];
        "0x0010d774" -> "0x0010d77a" [color="#c50f1f"];
        "0x0010d77a" -> "0x0010d797" [color="#13a10e"];
        "0x0010d77a" -> "0x0010d780" [color="#c50f1f"];
        "0x0010d780" -> "0x0010d9bd" [color="#0037da"];
        "0x0010d797" -> "0x0010d7cf" [color="#0037da"];
        "0x0010d7af" -> "0x0010d7cf" [color="#13a10e"];
        "0x0010d7af" -> "0x0010d7b8" [color="#c50f1f"];
        "0x0010d7b8" -> "0x0010d9bd" [color="#0037da"];
        "0x0010d7cf" -> "0x0010d7af" [color="#13a10e"];
        "0x0010d7cf" -> "0x0010d7eb" [color="#c50f1f"];
        "0x0010d7eb" -> "0x0010d808" [color="#13a10e"];
        "0x0010d7eb" -> "0x0010d7f1" [color="#c50f1f"];
        "0x0010d7f1" -> "0x0010d9bd" [color="#0037da"];
        "0x0010d808" -> "0x0010d843" [color="#13a10e"];
        "0x0010d808" -> "0x0010d82c" [color="#c50f1f"];
        "0x0010d82c" -> "0x0010d9bd" [color="#0037da"];
        "0x0010d843" -> "0x0010d887" [color="#0037da"];
        "0x0010d887" -> "0x0010d887" [color="#13a10e"];
        "0x0010d887" -> "0x0010d8a3" [color="#c50f1f"];
        "0x0010d8a3" -> "0x0010d930" [color="#13a10e"];
        "0x0010d8a3" -> "0x0010d919" [color="#c50f1f"];
        "0x0010d919" -> "0x0010d9bd" [color="#0037da"];
        "0x0010d930" -> "0x0010d956" [color="#13a10e"];
        "0x0010d930" -> "0x0010d936" [color="#c50f1f"];
        "0x0010d936" -> "0x0010d9bd" [color="#0037da"];
        "0x0010d956" -> "0x0010d994" [color="#13a10e"];
        "0x0010d956" -> "0x0010d980" [color="#c50f1f"];
        "0x0010d980" -> "0x0010d9bd" [color="#0037da"];
        "0x0010d994" -> "0x0010d9bd" [color="#0037da"];
}
