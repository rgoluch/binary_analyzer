digraph code {
	graph [bgcolor=azure fontsize=8 fontname="Courier" splines="ortho"];
	node [fillcolor=gray style=filled shape=box];
	edge [arrowhead="normal"];
	"0x00116735" [URL="sym.xsh_ps/0x00116735", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="636: sym.xsh_ps (int32_t arg_8h, int32_t arg_ch);\l; var int32_t var_50h @ ebp-0x50\l; var int32_t var_4ch @ ebp-0x4c\l; var int32_t var_40h @ ebp-0x40\l; var int32_t var_20h @ ebp-0x20\l; var int32_t var_1ch @ ebp-0x1c\l; var int32_t var_ch @ ebp-0xc\l; arg int32_t arg_8h @ ebp+0x8\l; arg int32_t arg_ch @ ebp+0xc\l0x00116735      push ebp\l0x00116736      mov ebp, esp\l0x00116738      push edi\l0x00116739      push esi\l0x0011673a      push ebx\l0x0011673b      sub esp, 0x4c\l0x0011673e      call sym.__x86.get_pc_thunk.bx\l0x00116743      add ebx, 0xa8bd\l0x00116749      lea eax, [var_40h]\l0x0011674c      lea edx, [ebx - 0xf80]\l0x00116752      mov ecx, 8\l0x00116757      mov edi, eax\l0x00116759      mov esi, edx\l0x0011675b      rep movsd dword es:[edi], dword ptr [esi]\l0x0011675d      cmp dword [arg_8h], 2\l0x00116761      jne 0x1167f2\l"]
	"0x00116767" [URL="sym.xsh_ps/0x00116767", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00116767      mov eax, dword [arg_ch]\l0x0011676a      add eax, 4\l0x0011676d      mov eax, dword [eax]\l0x0011676f      sub esp, 4\l0x00116772      push 7                                                 ; 7\l0x00116774      lea edx, [ebx - 0x6898]\l0x0011677a      push edx\l0x0011677b      push eax\l0x0011677c      call sym.strncmp                                       ; int strncmp(const char *s1, const char *s2, size_t n)\l0x00116781      add esp, 0x10\l0x00116784      test eax, eax\l0x00116786      jne 0x1167f2\l"]
	"0x00116788" [URL="sym.xsh_ps/0x00116788", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00116788      mov eax, dword [arg_ch]\l0x0011678b      mov eax, dword [eax]\l0x0011678d      sub esp, 8\l0x00116790      push eax\l0x00116791      lea eax, [ebx - 0x6891]\l0x00116797      push eax\l0x00116798      call sym.printf                                        ; int printf(const char *format)\l0x0011679d      add esp, 0x10\l0x001167a0      sub esp, 0xc\l0x001167a3      lea eax, [ebx - 0x6887]\l0x001167a9      push eax\l0x001167aa      call sym.printf                                        ; int printf(const char *format)\l0x001167af      add esp, 0x10\l0x001167b2      sub esp, 0xc\l0x001167b5      lea eax, [ebx - 0x6878]\l0x001167bb      push eax\l0x001167bc      call sym.printf                                        ; int printf(const char *format)\l0x001167c1      add esp, 0x10\l0x001167c4      sub esp, 0xc\l0x001167c7      lea eax, [ebx - 0x6849]\l0x001167cd      push eax\l0x001167ce      call sym.printf                                        ; int printf(const char *format)\l0x001167d3      add esp, 0x10\l0x001167d6      sub esp, 0xc\l0x001167d9      lea eax, [ebx - 0x683c]\l0x001167df      push eax\l0x001167e0      call sym.printf                                        ; int printf(const char *format)\l0x001167e5      add esp, 0x10\l0x001167e8      mov eax, 0\l0x001167ed      jmp 0x1169a9\l"]
	"0x001167f2" [URL="sym.xsh_ps/0x001167f2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from sym.xsh_ps @ 0x116761, 0x116786\l0x001167f2      cmp dword [arg_8h], 1\l0x001167f6      jle 0x116876\l"]
	"0x001167f8" [URL="sym.xsh_ps/0x001167f8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x001167f8      mov eax, dword [arg_ch]\l0x001167fb      mov edx, dword [eax]\l0x001167fd      mov eax, obj.currpid                                   ; 0x1212c0\l0x00116803      mov ecx, dword [eax]\l0x00116805      mov esi, obj.proctab                                   ; 0x1212e0\l0x0011680b      mov eax, ecx\l0x0011680d      shl eax, 3\l0x00116810      sub eax, ecx\l0x00116812      shl eax, 3\l0x00116815      add eax, esi\l0x00116817      add eax, 0x32                                          ; 50\l0x0011681a      mov ax, word [eax]\l0x0011681d      cwde\l0x0011681e      sub esp, 4\l0x00116821      push edx\l0x00116822      lea edx, [ebx - 0x6817]\l0x00116828      push edx\l0x00116829      push eax\l0x0011682a      call sym.fprintf                                       ; int fprintf(FILE *stream, const char *format,   ...)\l0x0011682f      add esp, 0x10\l0x00116832      mov eax, dword [arg_ch]\l0x00116835      mov edx, dword [eax]\l0x00116837      mov eax, obj.currpid                                   ; 0x1212c0\l0x0011683d      mov ecx, dword [eax]\l0x0011683f      mov esi, obj.proctab                                   ; 0x1212e0\l0x00116845      mov eax, ecx\l0x00116847      shl eax, 3\l0x0011684a      sub eax, ecx\l0x0011684c      shl eax, 3\l0x0011684f      add eax, esi\l0x00116851      add eax, 0x32                                          ; 50\l0x00116854      mov ax, word [eax]\l0x00116857      cwde\l0x00116858      sub esp, 4\l0x0011685b      push edx\l0x0011685c      lea edx, [ebx - 0x67fc]\l0x00116862      push edx\l0x00116863      push eax\l0x00116864      call sym.fprintf                                       ; int fprintf(FILE *stream, const char *format,   ...)\l0x00116869      add esp, 0x10\l0x0011686c      mov eax, 1\l0x00116871      jmp 0x1169a9\l"]
	"0x00116876" [URL="sym.xsh_ps/0x00116876", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.xsh_ps @ 0x1167f6\l0x00116876      sub esp, 0xc\l0x00116879      lea eax, [ebx - 0x67d6]\l0x0011687f      push eax\l0x00116880      lea eax, [ebx - 0x67cb]\l0x00116886      push eax\l0x00116887      lea eax, [ebx - 0x67c1]\l0x0011688d      push eax\l0x0011688e      lea eax, [ebx - 0x67b6]\l0x00116894      push eax\l0x00116895      lea eax, [ebx - 0x67b1]\l0x0011689b      push eax\l0x0011689c      lea eax, [ebx - 0x67ac]\l0x001168a2      push eax\l0x001168a3      lea eax, [ebx - 0x67a6]\l0x001168a9      push eax\l0x001168aa      lea eax, [ebx - 0x67a1]\l0x001168b0      push eax\l0x001168b1      lea eax, [ebx - 0x679c]\l0x001168b7      push eax\l0x001168b8      call sym.printf                                        ; int printf(const char *format)\l0x001168bd      add esp, 0x30\l0x001168c0      sub esp, 0xc\l0x001168c3      lea eax, [ebx - 0x6775]\l0x001168c9      push eax\l0x001168ca      lea eax, [ebx - 0x6775]\l0x001168d0      push eax\l0x001168d1      lea eax, [ebx - 0x6775]\l0x001168d7      push eax\l0x001168d8      lea eax, [ebx - 0x676a]\l0x001168de      push eax\l0x001168df      lea eax, [ebx - 0x676a]\l0x001168e5      push eax\l0x001168e6      lea eax, [ebx - 0x6765]\l0x001168ec      push eax\l0x001168ed      lea eax, [ebx - 0x675f]\l0x001168f3      push eax\l0x001168f4      lea eax, [ebx - 0x674e]\l0x001168fa      push eax\l0x001168fb      lea eax, [ebx - 0x679c]\l0x00116901      push eax\l0x00116902      call sym.printf                                        ; int printf(const char *format)\l0x00116907      add esp, 0x30\l0x0011690a      mov dword [var_1ch], 0\l0x00116911      jmp 0x11699a\l"]
	"0x00116916" [URL="sym.xsh_ps/0x00116916", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.xsh_ps @ 0x11699e\l0x00116916      mov edx, dword [var_1ch]\l0x00116919      mov eax, edx\l0x0011691b      shl eax, 3\l0x0011691e      sub eax, edx\l0x00116920      shl eax, 3\l0x00116923      mov edx, obj.proctab                                   ; 0x1212e0\l0x00116929      add eax, edx\l0x0011692b      mov dword [var_20h], eax\l0x0011692e      mov eax, dword [var_20h]\l0x00116931      mov eax, dword [eax]\l0x00116933      test ax, ax\l0x00116936      je 0x116996\l"]
	"0x00116938" [URL="sym.xsh_ps/0x00116938", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00116938      mov eax, dword [var_20h]\l0x0011693b      mov ecx, dword [eax + 0xc]\l0x0011693e      mov eax, dword [var_20h]\l0x00116941      mov eax, dword [eax + 4]\l0x00116944      mov dword [var_4ch], eax\l0x00116947      mov eax, dword [var_20h]\l0x0011694a      mov edi, dword [eax + 8]\l0x0011694d      mov dword [var_50h], edi\l0x00116950      mov eax, dword [var_20h]\l0x00116953      mov edi, dword [eax + 0x24]\l0x00116956      mov eax, dword [var_20h]\l0x00116959      mov ax, word [eax + 2]\l0x0011695d      movsx esi, ax\l0x00116960      mov eax, dword [var_20h]\l0x00116963      mov eax, dword [eax]\l0x00116965      and eax, 0xffff\l0x0011696a      mov edx, dword [ebp + eax*4 - 0x40]\l0x0011696e      mov eax, dword [var_20h]\l0x00116971      add eax, 0x10                                          ; 16\l0x00116974      sub esp, 0xc\l0x00116977      push ecx\l0x00116978      push dword [var_4ch]\l0x0011697b      push dword [var_50h]\l0x0011697e      push edi\l0x0011697f      push esi\l0x00116980      push edx\l0x00116981      push eax\l0x00116982      push dword [var_1ch]\l0x00116985      lea eax, [ebx - 0x6748]\l0x0011698b      push eax\l0x0011698c      call sym.printf                                        ; int printf(const char *format)\l0x00116991      add esp, 0x30\l0x00116994      jmp 0x116997\l"]
	"0x00116996" [URL="sym.xsh_ps/0x00116996", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.xsh_ps @ 0x116936\l0x00116996      nop\l"]
	"0x00116997" [URL="sym.xsh_ps/0x00116997", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.xsh_ps @ 0x116994\l0x00116997      inc dword [var_1ch]\l"]
	"0x0011699a" [URL="sym.xsh_ps/0x0011699a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.xsh_ps @ 0x116911\l0x0011699a      cmp dword [var_1ch], 0x63\l0x0011699e      jle 0x116916\l"]
	"0x001169a4" [URL="sym.xsh_ps/0x001169a4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x001169a4      mov eax, 0\l"]
	"0x001169a9" [URL="sym.xsh_ps/0x001169a9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from sym.xsh_ps @ 0x1167ed, 0x116871\l0x001169a9      lea esp, [var_ch]\l0x001169ac      pop ebx\l0x001169ad      pop esi\l0x001169ae      pop edi\l0x001169af      pop ebp\l0x001169b0      ret\l"]
        "0x00116735" -> "0x001167f2" [color="#13a10e"];
        "0x00116735" -> "0x00116767" [color="#c50f1f"];
        "0x00116767" -> "0x001167f2" [color="#13a10e"];
        "0x00116767" -> "0x00116788" [color="#c50f1f"];
        "0x00116788" -> "0x001169a9" [color="#0037da"];
        "0x001167f2" -> "0x00116876" [color="#13a10e"];
        "0x001167f2" -> "0x001167f8" [color="#c50f1f"];
        "0x001167f8" -> "0x001169a9" [color="#0037da"];
        "0x00116876" -> "0x0011699a" [color="#0037da"];
        "0x00116916" -> "0x00116996" [color="#13a10e"];
        "0x00116916" -> "0x00116938" [color="#c50f1f"];
        "0x00116938" -> "0x00116997" [color="#0037da"];
        "0x00116996" -> "0x00116997" [color="#0037da"];
        "0x00116997" -> "0x0011699a" [color="#0037da"];
        "0x0011699a" -> "0x00116916" [color="#13a10e"];
        "0x0011699a" -> "0x001169a4" [color="#c50f1f"];
        "0x001169a4" -> "0x001169a9" [color="#0037da"];
}
