digraph code {
	graph [bgcolor=azure fontsize=8 fontname="Courier" splines="ortho"];
	node [fillcolor=gray style=filled shape=box];
	edge [arrowhead="normal"];
	"0x00110a15" [URL="sym.ip_enqueue/0x00110a15", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="  ; CALL XREF from sym.icmp_in @ 0x10f925\l199: sym.ip_enqueue (int32_t arg_8h);\l; var int32_t var_10h @ ebp-0x10\l; var int32_t var_ch @ ebp-0xc\l; var int32_t var_4h @ ebp-0x4\l; arg int32_t arg_8h @ ebp+0x8\l0x00110a15      push ebp\l0x00110a16      mov ebp, esp\l0x00110a18      push ebx\l0x00110a19      sub esp, 0x14\l0x00110a1c      call sym.__x86.get_pc_thunk.bx\l0x00110a21      add ebx, 0x105df\l0x00110a27      call loc.disable\l0x00110a2c      mov dword [var_ch], eax\l0x00110a2f      mov eax, obj.ipoqueue                                  ; 0x1401a0\l0x00110a35      mov dword [var_10h], eax\l0x00110a38      mov eax, dword [var_10h]\l0x00110a3b      mov eax, dword [eax + 8]\l0x00110a3e      sub esp, 0xc\l0x00110a41      push eax\l0x00110a42      call sym.semcount\l0x00110a47      add esp, 0x10\l0x00110a4a      cmp eax, 7                                             ; 7\l0x00110a4d      jle 0x110a84\l"]
	"0x00110a4f" [URL="sym.ip_enqueue/0x00110a4f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00110a4f      sub esp, 0xc\l0x00110a52      lea eax, [ebx - 0x7f10]\l0x00110a58      push eax\l0x00110a59      call sym.kprintf\l0x00110a5e      add esp, 0x10\l0x00110a61      sub esp, 0xc\l0x00110a64      push dword [arg_8h]\l0x00110a67      call sym.freebuf\l0x00110a6c      add esp, 0x10\l0x00110a6f      sub esp, 0xc\l0x00110a72      push dword [var_ch]\l0x00110a75      call loc.restore\l0x00110a7a      add esp, 0x10\l0x00110a7d      mov eax, 0xffffffff                                    ; -1\l0x00110a82      jmp 0x110ad7\l"]
	"0x00110a84" [URL="sym.ip_enqueue/0x00110a84", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.ip_enqueue @ 0x110a4d\l0x00110a84      mov eax, dword [var_10h]\l0x00110a87      mov eax, dword [eax + 4]\l0x00110a8a      lea ecx, [eax + 1]\l0x00110a8d      mov edx, dword [var_10h]\l0x00110a90      mov dword [edx + 4], ecx\l0x00110a93      mov edx, dword [var_10h]\l0x00110a96      mov ecx, dword [arg_8h]\l0x00110a99      mov dword [edx + eax*4 + 0xc], ecx\l0x00110a9d      mov eax, dword [var_10h]\l0x00110aa0      mov eax, dword [eax + 4]\l0x00110aa3      cmp eax, 7                                             ; 7\l0x00110aa6      jle 0x110ab2\l"]
	"0x00110aa8" [URL="sym.ip_enqueue/0x00110aa8", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00110aa8      mov eax, dword [var_10h]\l0x00110aab      mov dword [eax + 4], 0\l"]
	"0x00110ab2" [URL="sym.ip_enqueue/0x00110ab2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.ip_enqueue @ 0x110aa6\l0x00110ab2      mov eax, dword [var_10h]\l0x00110ab5      mov eax, dword [eax + 8]\l0x00110ab8      sub esp, 0xc\l0x00110abb      push eax\l0x00110abc      call sym.signal                                        ; void signal(int sig, void *func)\l0x00110ac1      add esp, 0x10\l0x00110ac4      sub esp, 0xc\l0x00110ac7      push dword [var_ch]\l0x00110aca      call loc.restore\l0x00110acf      add esp, 0x10\l0x00110ad2      mov eax, 1\l"]
	"0x00110ad7" [URL="sym.ip_enqueue/0x00110ad7", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.ip_enqueue @ 0x110a82\l0x00110ad7      mov ebx, dword [var_4h]\l0x00110ada      leave\l0x00110adb      ret\l"]
        "0x00110a15" -> "0x00110a84" [color="#13a10e"];
        "0x00110a15" -> "0x00110a4f" [color="#c50f1f"];
        "0x00110a4f" -> "0x00110ad7" [color="#0037da"];
        "0x00110a84" -> "0x00110ab2" [color="#13a10e"];
        "0x00110a84" -> "0x00110aa8" [color="#c50f1f"];
        "0x00110aa8" -> "0x00110ab2" [color="#0037da"];
        "0x00110ab2" -> "0x00110ad7" [color="#0037da"];
}
