digraph code {
	graph [bgcolor=azure fontsize=8 fontname="Courier" splines="ortho"];
	node [fillcolor=gray style=filled shape=box];
	edge [arrowhead="normal"];
	"0x00112f23" [URL="sym.udp_send/0x00112f23", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="  ; CALL XREF from sym.getutime @ 0x101fc7\l  ; CALL XREF from sym.rfscomm @ 0x10d138\l  ; CALL XREF from sym.dnslookup @ 0x10ed2c\l  ; CALL XREF from sym.xsh_udpecho @ 0x11727d\l502: sym.udp_send (int32_t arg_8h, int32_t arg_ch, int32_t arg_10h);\l; var int32_t var_28h @ ebp-0x28\l; var int32_t var_24h @ ebp-0x24\l; var int32_t var_20h @ ebp-0x20\l; var int32_t var_1ch @ ebp-0x1c\l; var int32_t var_1ah @ ebp-0x1a\l; var int32_t var_18h @ ebp-0x18\l; var int32_t var_14h @ ebp-0x14\l; var int32_t var_10h @ ebp-0x10\l; var int32_t var_ch @ ebp-0xc\l; var int32_t var_4h @ ebp-0x4\l; arg int32_t arg_8h @ ebp+0x8\l; arg int32_t arg_ch @ ebp+0xc\l; arg int32_t arg_10h @ ebp+0x10\l0x00112f23      push ebp\l0x00112f24      mov ebp, esp\l0x00112f26      push ebx\l0x00112f27      sub esp, 0x24\l0x00112f2a      call sym.__x86.get_pc_thunk.bx\l0x00112f2f      add ebx, 0xe0d1\l0x00112f35      call loc.disable\l0x00112f3a      mov dword [var_ch], eax\l0x00112f3d      cmp dword [arg_8h], 0\l0x00112f41      js 0x112f49\l"]
	"0x00112f43" [URL="sym.udp_send/0x00112f43", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00112f43      cmp dword [arg_8h], 5\l0x00112f47      jle 0x112f61\l"]
	"0x00112f49" [URL="sym.udp_send/0x00112f49", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.udp_send @ 0x112f41\l0x00112f49      sub esp, 0xc\l0x00112f4c      push dword [var_ch]\l0x00112f4f      call loc.restore\l0x00112f54      add esp, 0x10\l0x00112f57      mov eax, 0xffffffff                                    ; -1\l0x00112f5c      jmp 0x113114\l"]
	"0x00112f61" [URL="sym.udp_send/0x00112f61", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.udp_send @ 0x112f47\l0x00112f61      mov edx, dword [arg_8h]\l0x00112f64      mov eax, edx\l0x00112f66      shl eax, 4\l0x00112f69      sub eax, edx\l0x00112f6b      shl eax, 2\l0x00112f6e      mov edx, obj.udptab                                    ; 0x1402c0\l0x00112f74      add eax, edx\l0x00112f76      mov dword [var_10h], eax\l0x00112f79      mov eax, dword [var_10h]\l0x00112f7c      mov eax, dword [eax]\l0x00112f7e      test eax, eax\l0x00112f80      jne 0x112f9a\l"]
	"0x00112f82" [URL="sym.udp_send/0x00112f82", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00112f82      sub esp, 0xc\l0x00112f85      push dword [var_ch]\l0x00112f88      call loc.restore\l0x00112f8d      add esp, 0x10\l0x00112f90      mov eax, 0xffffffff                                    ; -1\l0x00112f95      jmp 0x113114\l"]
	"0x00112f9a" [URL="sym.udp_send/0x00112f9a", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.udp_send @ 0x112f80\l0x00112f9a      mov eax, dword [var_10h]\l0x00112f9d      mov eax, dword [eax + 4]\l0x00112fa0      mov dword [var_14h], eax\l0x00112fa3      cmp dword [var_14h], 0\l0x00112fa7      jne 0x112fc1\l"]
	"0x00112fa9" [URL="sym.udp_send/0x00112fa9", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00112fa9      sub esp, 0xc\l0x00112fac      push dword [var_ch]\l0x00112faf      call loc.restore\l0x00112fb4      add esp, 0x10\l0x00112fb7      mov eax, 0xffffffff                                    ; -1\l0x00112fbc      jmp 0x113114\l"]
	"0x00112fc1" [URL="sym.udp_send/0x00112fc1", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.udp_send @ 0x112fa7\l0x00112fc1      mov eax, obj.NetData                                   ; 0x140200\l0x00112fc7      mov eax, dword [eax]\l0x00112fc9      mov dword [var_18h], eax\l0x00112fcc      mov eax, dword [var_10h]\l0x00112fcf      mov eax, dword [eax + 8]\l0x00112fd2      mov word [var_1ah], ax\l0x00112fd6      mov eax, dword [var_10h]\l0x00112fd9      mov ax, word [eax + 0xa]\l0x00112fdd      mov word [var_1ch], ax\l0x00112fe1      mov eax, obj.netbufpool                                ; 0x1401e0\l0x00112fe7      mov eax, dword [eax]\l0x00112fe9      sub esp, 0xc\l0x00112fec      push eax\l0x00112fed      call sym.getbuf\l0x00112ff2      add esp, 0x10\l0x00112ff5      mov dword [var_20h], eax\l0x00112ff8      cmp dword [var_20h], 0xffffffff\l0x00112ffc      jne 0x113016\l"]
	"0x00112ffe" [URL="sym.udp_send/0x00112ffe", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00112ffe      sub esp, 0xc\l0x00113001      push dword [var_ch]\l0x00113004      call loc.restore\l0x00113009      add esp, 0x10\l0x0011300c      mov eax, 0xffffffff                                    ; -1\l0x00113011      jmp 0x113114\l"]
	"0x00113016" [URL="sym.udp_send/0x00113016", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.udp_send @ 0x112ffc\l0x00113016      mov eax, dword [arg_10h]\l0x00113019      add eax, 0x2a                                          ; 42\l0x0011301c      mov dword [var_24h], eax\l0x0011301f      mov eax, dword [var_20h]\l0x00113022      lea edx, [eax + 6]\l0x00113025      sub esp, 4\l0x00113028      push 6                                                 ; 6\l0x0011302a      mov eax, obj.NetData                                   ; 0x140200\l0x00113030      lea eax, [eax + 0x21]\l0x00113033      push eax\l0x00113034      push edx\l0x00113035      call sym.memcpy                                        ; void *memcpy(void *s1, const void *s2, size_t n)\l0x0011303a      add esp, 0x10\l0x0011303d      mov eax, dword [var_20h]\l0x00113040      mov word [eax + 0xc], 0x800                            ; [0x800:2]=0xffff ; 2048\l0x00113046      mov eax, dword [var_20h]\l0x00113049      mov byte [eax + 0xe], 0x45                             ; 'E'\l                                                                       ; [0x45:1]=255 ; 69\l0x0011304d      mov eax, dword [var_20h]\l0x00113050      mov byte [eax + 0xf], 0\l0x00113054      mov eax, dword [var_24h]\l0x00113057      sub eax, 0xe                                           ; 14\l0x0011305a      mov edx, dword [var_20h]\l0x0011305d      mov word [edx + 0x10], ax\l0x00113061      mov ax, word [ebx - 0x1098]\l0x00113068      lea edx, [eax + 1]\l0x0011306b      mov word [ebx - 0x1098], dx\l0x00113072      mov edx, dword [var_20h]\l0x00113075      mov word [edx + 0x12], ax\l0x00113079      mov eax, dword [var_20h]\l0x0011307c      mov word [eax + 0x14], 0\l0x00113082      mov eax, dword [var_20h]\l0x00113085      mov byte [eax + 0x16], 0xff                            ; [0xff:1]=255 ; 255\l0x00113089      mov eax, dword [var_20h]\l0x0011308c      mov byte [eax + 0x17], 0x11                            ; [0x11:1]=255 ; 17\l0x00113090      mov eax, dword [var_20h]\l0x00113093      mov word [eax + 0x18], 0\l0x00113099      mov eax, dword [var_20h]\l0x0011309c      mov edx, dword [var_18h]\l0x0011309f      mov dword [eax + 0x1a], edx\l0x001130a2      mov eax, dword [var_20h]\l0x001130a5      mov edx, dword [var_14h]\l0x001130a8      mov dword [eax + 0x1e], edx\l0x001130ab      mov edx, dword [var_20h]\l0x001130ae      mov eax, dword [var_1ch]\l0x001130b1      mov word [edx + 0x22], ax\l0x001130b5      mov edx, dword [var_20h]\l0x001130b8      mov ax, word [var_1ah]\l0x001130bc      mov word [edx + 0x24], ax\l0x001130c0      mov eax, dword [arg_10h]\l0x001130c3      add eax, 8\l0x001130c6      mov edx, dword [var_20h]\l0x001130c9      mov word [edx + 0x26], ax\l0x001130cd      mov eax, dword [var_20h]\l0x001130d0      mov word [eax + 0x28], 0\l0x001130d6      mov eax, dword [var_20h]\l0x001130d9      add eax, 0x2a                                          ; 42\l0x001130dc      mov dword [var_28h], eax\l0x001130df      sub esp, 4\l0x001130e2      push dword [arg_10h]\l0x001130e5      push dword [arg_ch]\l0x001130e8      push dword [var_28h]\l0x001130eb      call sym.memcpy                                        ; void *memcpy(void *s1, const void *s2, size_t n)\l0x001130f0      add esp, 0x10\l0x001130f3      sub esp, 0xc\l0x001130f6      push dword [var_20h]\l0x001130f9      call sym.ip_send\l0x001130fe      add esp, 0x10\l0x00113101      sub esp, 0xc\l0x00113104      push dword [var_ch]\l0x00113107      call loc.restore\l0x0011310c      add esp, 0x10\l0x0011310f      mov eax, 1\l"]
	"0x00113114" [URL="sym.udp_send/0x00113114", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from sym.udp_send @ 0x112f5c, 0x112f95, 0x112fbc, 0x113011\l0x00113114      mov ebx, dword [var_4h]\l0x00113117      leave\l0x00113118      ret\l"]
        "0x00112f23" -> "0x00112f49" [color="#13a10e"];
        "0x00112f23" -> "0x00112f43" [color="#c50f1f"];
        "0x00112f43" -> "0x00112f61" [color="#13a10e"];
        "0x00112f43" -> "0x00112f49" [color="#c50f1f"];
        "0x00112f49" -> "0x00113114" [color="#0037da"];
        "0x00112f61" -> "0x00112f9a" [color="#13a10e"];
        "0x00112f61" -> "0x00112f82" [color="#c50f1f"];
        "0x00112f82" -> "0x00113114" [color="#0037da"];
        "0x00112f9a" -> "0x00112fc1" [color="#13a10e"];
        "0x00112f9a" -> "0x00112fa9" [color="#c50f1f"];
        "0x00112fa9" -> "0x00113114" [color="#0037da"];
        "0x00112fc1" -> "0x00113016" [color="#13a10e"];
        "0x00112fc1" -> "0x00112ffe" [color="#c50f1f"];
        "0x00112ffe" -> "0x00113114" [color="#0037da"];
        "0x00113016" -> "0x00113114" [color="#0037da"];
}
