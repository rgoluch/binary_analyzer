digraph code {
	graph [bgcolor=azure fontsize=8 fontname="Courier" splines="ortho"];
	node [fillcolor=gray style=filled shape=box];
	edge [arrowhead="normal"];
	"0x0010da05" [URL="sym.arp_resolve/0x0010da05", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="  ; CALL XREF from sym.ip_send @ 0x11044a\l  ; CALL XREF from sym.ipout @ 0x1109e1\l750: sym.arp_resolve (int32_t arg_8h, int32_t arg_ch);\l; var int32_t var_46h @ ebp-0x46\l; var int32_t var_3ah @ ebp-0x3a\l; var int32_t var_38h @ ebp-0x38\l; var int32_t var_36h @ ebp-0x36\l; var int32_t var_34h @ ebp-0x34\l; var int32_t var_33h @ ebp-0x33\l; var int32_t var_32h @ ebp-0x32\l; var int32_t var_2ah @ ebp-0x2a\l; var int32_t var_20h @ ebp-0x20\l; var int32_t var_1ch @ ebp-0x1c\l; var int32_t var_18h @ ebp-0x18\l; var int32_t var_14h @ ebp-0x14\l; var int32_t var_10h @ ebp-0x10\l; var int32_t var_ch @ ebp-0xc\l; var int32_t var_4h @ ebp-0x4\l; arg int32_t arg_8h @ ebp+0x8\l; arg int32_t arg_ch @ ebp+0xc\l0x0010da05      push ebp\l0x0010da06      mov ebp, esp\l0x0010da08      push ebx\l0x0010da09      sub esp, 0x44\l0x0010da0c      call sym.__x86.get_pc_thunk.bx\l0x0010da11      add ebx, 0x135ef\l0x0010da17      cmp dword [arg_8h], 0xffffffff\l0x0010da1b      jne 0x10da41\l"]
	"0x0010da1d" [URL="sym.arp_resolve/0x0010da1d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010da1d      sub esp, 4\l0x0010da20      push 6                                                 ; 6\l0x0010da22      mov eax, obj.NetData                                   ; 0x140200\l0x0010da28      lea eax, [eax + 0x27]\l0x0010da2b      push eax\l0x0010da2c      push dword [arg_ch]\l0x0010da2f      call sym.memcpy                                        ; void *memcpy(void *s1, const void *s2, size_t n)\l0x0010da34      add esp, 0x10\l0x0010da37      mov eax, 1\l0x0010da3c      jmp 0x10dcee\l"]
	"0x0010da41" [URL="sym.arp_resolve/0x0010da41", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.arp_resolve @ 0x10da1b\l0x0010da41      mov eax, obj.NetData                                   ; 0x140200\l0x0010da47      mov eax, dword [eax + 4]\l0x0010da4a      cmp dword [arg_8h], eax\l0x0010da4d      jne 0x10da73\l"]
	"0x0010da4f" [URL="sym.arp_resolve/0x0010da4f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010da4f      sub esp, 4\l0x0010da52      push 6                                                 ; 6\l0x0010da54      mov eax, obj.NetData                                   ; 0x140200\l0x0010da5a      lea eax, [eax + 0x27]\l0x0010da5d      push eax\l0x0010da5e      push dword [arg_ch]\l0x0010da61      call sym.memcpy                                        ; void *memcpy(void *s1, const void *s2, size_t n)\l0x0010da66      add esp, 0x10\l0x0010da69      mov eax, 1\l0x0010da6e      jmp 0x10dcee\l"]
	"0x0010da73" [URL="sym.arp_resolve/0x0010da73", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.arp_resolve @ 0x10da4d\l0x0010da73      call loc.disable\l0x0010da78      mov dword [var_18h], eax\l0x0010da7b      mov dword [var_ch], 0\l0x0010da82      jmp 0x10dab6\l"]
	"0x0010da84" [URL="sym.arp_resolve/0x0010da84", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.arp_resolve @ 0x10daba\l0x0010da84      mov edx, dword [var_ch]\l0x0010da87      mov eax, edx\l0x0010da89      shl eax, 2\l0x0010da8c      add eax, edx\l0x0010da8e      shl eax, 2\l0x0010da91      mov edx, obj.arpcache                                  ; 0x13fe20\l0x0010da97      add eax, edx\l0x0010da99      mov dword [var_10h], eax\l0x0010da9c      mov eax, dword [var_10h]\l0x0010da9f      mov eax, dword [eax]\l0x0010daa1      test eax, eax\l0x0010daa3      je 0x10dab2\l"]
	"0x0010daa5" [URL="sym.arp_resolve/0x0010daa5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010daa5      mov eax, dword [var_10h]\l0x0010daa8      mov eax, dword [eax + 4]\l0x0010daab      cmp dword [arg_8h], eax\l0x0010daae      je 0x10dabe\l"]
	"0x0010dab0" [URL="sym.arp_resolve/0x0010dab0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010dab0      jmp 0x10dab3\l"]
	"0x0010dab2" [URL="sym.arp_resolve/0x0010dab2", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.arp_resolve @ 0x10daa3\l0x0010dab2      nop\l"]
	"0x0010dab3" [URL="sym.arp_resolve/0x0010dab3", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.arp_resolve @ 0x10dab0\l0x0010dab3      inc dword [var_ch]\l"]
	"0x0010dab6" [URL="sym.arp_resolve/0x0010dab6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.arp_resolve @ 0x10da82\l0x0010dab6      cmp dword [var_ch], 0xf\l0x0010daba      jle 0x10da84\l"]
	"0x0010dabc" [URL="sym.arp_resolve/0x0010dabc", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010dabc      jmp 0x10dabf\l"]
	"0x0010dabe" [URL="sym.arp_resolve/0x0010dabe", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.arp_resolve @ 0x10daae\l0x0010dabe      nop\l"]
	"0x0010dabf" [URL="sym.arp_resolve/0x0010dabf", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.arp_resolve @ 0x10dabc\l0x0010dabf      cmp dword [var_ch], 0xf\l0x0010dac3      jg 0x10db20\l"]
	"0x0010dac5" [URL="sym.arp_resolve/0x0010dac5", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010dac5      mov eax, dword [var_10h]\l0x0010dac8      mov eax, dword [eax]\l0x0010daca      cmp eax, 2                                             ; 2\l0x0010dacd      jne 0x10dafe\l"]
	"0x0010dacf" [URL="sym.arp_resolve/0x0010dacf", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010dacf      mov eax, dword [var_10h]\l0x0010dad2      add eax, 0xc                                           ; 12\l0x0010dad5      sub esp, 4\l0x0010dad8      push 6                                                 ; 6\l0x0010dada      push eax\l0x0010dadb      push dword [arg_ch]\l0x0010dade      call sym.memcpy                                        ; void *memcpy(void *s1, const void *s2, size_t n)\l0x0010dae3      add esp, 0x10\l0x0010dae6      sub esp, 0xc\l0x0010dae9      push dword [var_18h]\l0x0010daec      call loc.restore\l0x0010daf1      add esp, 0x10\l0x0010daf4      mov eax, 1\l0x0010daf9      jmp 0x10dcee\l"]
	"0x0010dafe" [URL="sym.arp_resolve/0x0010dafe", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.arp_resolve @ 0x10dacd\l0x0010dafe      mov eax, dword [var_10h]\l0x0010db01      mov eax, dword [eax]\l0x0010db03      cmp eax, 1                                             ; 1\l0x0010db06      jne 0x10db20\l"]
	"0x0010db08" [URL="sym.arp_resolve/0x0010db08", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010db08      sub esp, 0xc\l0x0010db0b      push dword [var_18h]\l0x0010db0e      call loc.restore\l0x0010db13      add esp, 0x10\l0x0010db16      mov eax, 0xffffffff                                    ; -1\l0x0010db1b      jmp 0x10dcee\l"]
	"0x0010db20" [URL="sym.arp_resolve/0x0010db20", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from sym.arp_resolve @ 0x10dac3, 0x10db06\l0x0010db20      call sym.arp_alloc\l0x0010db25      mov dword [var_1ch], eax\l0x0010db28      cmp dword [var_1ch], 0xffffffff\l0x0010db2c      jne 0x10db46\l"]
	"0x0010db2e" [URL="sym.arp_resolve/0x0010db2e", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010db2e      sub esp, 0xc\l0x0010db31      push dword [var_18h]\l0x0010db34      call loc.restore\l0x0010db39      add esp, 0x10\l0x0010db3c      mov eax, 0xffffffff                                    ; -1\l0x0010db41      jmp 0x10dcee\l"]
	"0x0010db46" [URL="sym.arp_resolve/0x0010db46", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.arp_resolve @ 0x10db2c\l0x0010db46      mov edx, dword [var_1ch]\l0x0010db49      mov eax, edx\l0x0010db4b      shl eax, 2\l0x0010db4e      add eax, edx\l0x0010db50      shl eax, 2\l0x0010db53      mov edx, obj.arpcache                                  ; 0x13fe20\l0x0010db59      add eax, edx\l0x0010db5b      mov dword [var_10h], eax\l0x0010db5e      mov eax, dword [var_10h]\l0x0010db61      mov dword [eax], 1\l0x0010db67      mov eax, dword [var_10h]\l0x0010db6a      mov edx, dword [arg_8h]\l0x0010db6d      mov dword [eax + 4], edx\l0x0010db70      mov eax, obj.currpid                                   ; 0x1212c0\l0x0010db76      mov edx, dword [eax]\l0x0010db78      mov eax, dword [var_10h]\l0x0010db7b      mov dword [eax + 8], edx\l0x0010db7e      sub esp, 4\l0x0010db81      push 6                                                 ; 6\l0x0010db83      mov eax, obj.NetData                                   ; 0x140200\l0x0010db89      lea eax, [eax + 0x27]\l0x0010db8c      push eax\l0x0010db8d      lea eax, [var_46h]\l0x0010db90      push eax\l0x0010db91      call sym.memcpy                                        ; void *memcpy(void *s1, const void *s2, size_t n)\l0x0010db96      add esp, 0x10\l0x0010db99      sub esp, 4\l0x0010db9c      push 6                                                 ; 6\l0x0010db9e      mov eax, obj.NetData                                   ; 0x140200\l0x0010dba4      lea eax, [eax + 0x21]\l0x0010dba7      push eax\l0x0010dba8      lea eax, [var_46h]\l0x0010dbab      add eax, 6\l0x0010dbae      push eax\l0x0010dbaf      call sym.memcpy                                        ; void *memcpy(void *s1, const void *s2, size_t n)\l0x0010dbb4      add esp, 0x10\l0x0010dbb7      mov word [var_3ah], 0x806                              ; 2054\l0x0010dbbd      mov word [var_38h], 1\l0x0010dbc3      mov word [var_36h], 0x800                              ; 2048\l0x0010dbc9      mov byte [var_34h], 6\l0x0010dbcd      mov byte [var_33h], 4\l0x0010dbd1      mov word [var_32h], 1\l0x0010dbd7      sub esp, 4\l0x0010dbda      push 6                                                 ; 6\l0x0010dbdc      mov eax, obj.NetData                                   ; 0x140200\l0x0010dbe2      lea eax, [eax + 0x21]\l0x0010dbe5      push eax\l0x0010dbe6      lea eax, [var_46h]\l0x0010dbe9      add eax, 0x16                                          ; 22\l0x0010dbec      push eax\l0x0010dbed      call sym.memcpy                                        ; void *memcpy(void *s1, const void *s2, size_t n)\l0x0010dbf2      add esp, 0x10\l0x0010dbf5      mov eax, obj.NetData                                   ; 0x140200\l0x0010dbfb      mov eax, dword [eax]\l0x0010dbfd      mov dword [var_2ah], eax\l0x0010dc00      sub esp, 4\l0x0010dc03      push 6                                                 ; 6\l0x0010dc05      push 0\l0x0010dc07      lea eax, [var_46h]\l0x0010dc0a      add eax, 0x20                                          ; loc.EOI\l0x0010dc0d      push eax\l0x0010dc0e      call sym.memset                                        ; void *memset(void *s, int c, size_t n)\l0x0010dc13      add esp, 0x10\l0x0010dc16      mov eax, dword [arg_8h]\l0x0010dc19      mov dword [var_20h], eax\l0x0010dc1c      sub esp, 0xc\l0x0010dc1f      lea eax, [var_46h]\l0x0010dc22      push eax\l0x0010dc23      call sym.arp_hton\l0x0010dc28      add esp, 0x10\l0x0010dc2b      sub esp, 0xc\l0x0010dc2e      lea eax, [var_46h]\l0x0010dc31      push eax\l0x0010dc32      call sym.eth_hton\l0x0010dc37      add esp, 0x10\l0x0010dc3a      call sym.recvclr\l0x0010dc3f      mov dword [var_14h], eax\l0x0010dc42      mov dword [var_ch], 0\l0x0010dc49      jmp 0x10dc97\l"]
	"0x0010dc4b" [URL="sym.arp_resolve/0x0010dc4b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.arp_resolve @ 0x10dc9b\l0x0010dc4b      sub esp, 4\l0x0010dc4e      push 0x2a                                              ; '*' ; 42\l0x0010dc50      lea eax, [var_46h]\l0x0010dc53      push eax\l0x0010dc54      push 2                                                 ; 2\l0x0010dc56      call sym.write                                         ; ssize_t write(int fd, const char *ptr, size_t nbytes)\l0x0010dc5b      add esp, 0x10\l0x0010dc5e      sub esp, 0xc\l0x0010dc61      push 0x12c                                             ; 300\l0x0010dc66      call sym.recvtime\l0x0010dc6b      add esp, 0x10\l0x0010dc6e      mov dword [var_14h], eax\l0x0010dc71      cmp dword [var_14h], 0xfffffffd\l0x0010dc75      jne 0x10dc7c\l"]
	"0x0010dc77" [URL="sym.arp_resolve/0x0010dc77", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010dc77      inc dword [var_ch]\l0x0010dc7a      jmp 0x10dc97\l"]
	"0x0010dc7c" [URL="sym.arp_resolve/0x0010dc7c", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.arp_resolve @ 0x10dc75\l0x0010dc7c      cmp dword [var_14h], 0xffffffff\l0x0010dc80      jne 0x10dc9f\l"]
	"0x0010dc82" [URL="sym.arp_resolve/0x0010dc82", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010dc82      sub esp, 0xc\l0x0010dc85      push dword [var_18h]\l0x0010dc88      call loc.restore\l0x0010dc8d      add esp, 0x10\l0x0010dc90      mov eax, 0xffffffff                                    ; -1\l0x0010dc95      jmp 0x10dcee\l"]
	"0x0010dc97" [URL="sym.arp_resolve/0x0010dc97", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from sym.arp_resolve @ 0x10dc49, 0x10dc7a\l0x0010dc97      cmp dword [var_ch], 2\l0x0010dc9b      jle 0x10dc4b\l"]
	"0x0010dc9d" [URL="sym.arp_resolve/0x0010dc9d", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010dc9d      jmp 0x10dca0\l"]
	"0x0010dc9f" [URL="sym.arp_resolve/0x0010dc9f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.arp_resolve @ 0x10dc80\l0x0010dc9f      nop\l"]
	"0x0010dca0" [URL="sym.arp_resolve/0x0010dca0", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.arp_resolve @ 0x10dc9d\l0x0010dca0      cmp dword [var_14h], 0xfffffffd\l0x0010dca4      jne 0x10dcc4\l"]
	"0x0010dca6" [URL="sym.arp_resolve/0x0010dca6", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010dca6      mov eax, dword [var_10h]\l0x0010dca9      mov dword [eax], 0\l0x0010dcaf      sub esp, 0xc\l0x0010dcb2      push dword [var_18h]\l0x0010dcb5      call loc.restore\l0x0010dcba      add esp, 0x10\l0x0010dcbd      mov eax, 0xfffffffd                                    ; 4294967293\l0x0010dcc2      jmp 0x10dcee\l"]
	"0x0010dcc4" [URL="sym.arp_resolve/0x0010dcc4", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.arp_resolve @ 0x10dca4\l0x0010dcc4      mov eax, dword [var_10h]\l0x0010dcc7      add eax, 0xc                                           ; 12\l0x0010dcca      sub esp, 4\l0x0010dccd      push 6                                                 ; 6\l0x0010dccf      push eax\l0x0010dcd0      push dword [arg_ch]\l0x0010dcd3      call sym.memcpy                                        ; void *memcpy(void *s1, const void *s2, size_t n)\l0x0010dcd8      add esp, 0x10\l0x0010dcdb      sub esp, 0xc\l0x0010dcde      push dword [var_18h]\l0x0010dce1      call loc.restore\l0x0010dce6      add esp, 0x10\l0x0010dce9      mov eax, 1\l"]
	"0x0010dcee" [URL="sym.arp_resolve/0x0010dcee", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; XREFS: CODE 0x0010da3c  CODE 0x0010da6e  CODE 0x0010daf9  \l; XREFS: CODE 0x0010db1b  CODE 0x0010db41  CODE 0x0010dc95  \l; XREFS: CODE 0x0010dcc2  \l0x0010dcee      mov ebx, dword [var_4h]\l0x0010dcf1      leave\l0x0010dcf2      ret\l"]
        "0x0010da05" -> "0x0010da41" [color="#13a10e"];
        "0x0010da05" -> "0x0010da1d" [color="#c50f1f"];
        "0x0010da1d" -> "0x0010dcee" [color="#0037da"];
        "0x0010da41" -> "0x0010da73" [color="#13a10e"];
        "0x0010da41" -> "0x0010da4f" [color="#c50f1f"];
        "0x0010da4f" -> "0x0010dcee" [color="#0037da"];
        "0x0010da73" -> "0x0010dab6" [color="#0037da"];
        "0x0010da84" -> "0x0010dab2" [color="#13a10e"];
        "0x0010da84" -> "0x0010daa5" [color="#c50f1f"];
        "0x0010daa5" -> "0x0010dabe" [color="#13a10e"];
        "0x0010daa5" -> "0x0010dab0" [color="#c50f1f"];
        "0x0010dab0" -> "0x0010dab3" [color="#0037da"];
        "0x0010dab2" -> "0x0010dab3" [color="#0037da"];
        "0x0010dab3" -> "0x0010dab6" [color="#0037da"];
        "0x0010dab6" -> "0x0010da84" [color="#13a10e"];
        "0x0010dab6" -> "0x0010dabc" [color="#c50f1f"];
        "0x0010dabc" -> "0x0010dabf" [color="#0037da"];
        "0x0010dabe" -> "0x0010dabf" [color="#0037da"];
        "0x0010dabf" -> "0x0010db20" [color="#13a10e"];
        "0x0010dabf" -> "0x0010dac5" [color="#c50f1f"];
        "0x0010dac5" -> "0x0010dafe" [color="#13a10e"];
        "0x0010dac5" -> "0x0010dacf" [color="#c50f1f"];
        "0x0010dacf" -> "0x0010dcee" [color="#0037da"];
        "0x0010dafe" -> "0x0010db20" [color="#13a10e"];
        "0x0010dafe" -> "0x0010db08" [color="#c50f1f"];
        "0x0010db08" -> "0x0010dcee" [color="#0037da"];
        "0x0010db20" -> "0x0010db46" [color="#13a10e"];
        "0x0010db20" -> "0x0010db2e" [color="#c50f1f"];
        "0x0010db2e" -> "0x0010dcee" [color="#0037da"];
        "0x0010db46" -> "0x0010dc97" [color="#0037da"];
        "0x0010dc4b" -> "0x0010dc7c" [color="#13a10e"];
        "0x0010dc4b" -> "0x0010dc77" [color="#c50f1f"];
        "0x0010dc77" -> "0x0010dc97" [color="#0037da"];
        "0x0010dc7c" -> "0x0010dc9f" [color="#13a10e"];
        "0x0010dc7c" -> "0x0010dc82" [color="#c50f1f"];
        "0x0010dc82" -> "0x0010dcee" [color="#0037da"];
        "0x0010dc97" -> "0x0010dc4b" [color="#13a10e"];
        "0x0010dc97" -> "0x0010dc9d" [color="#c50f1f"];
        "0x0010dc9d" -> "0x0010dca0" [color="#0037da"];
        "0x0010dc9f" -> "0x0010dca0" [color="#0037da"];
        "0x0010dca0" -> "0x0010dcc4" [color="#13a10e"];
        "0x0010dca0" -> "0x0010dca6" [color="#c50f1f"];
        "0x0010dca6" -> "0x0010dcee" [color="#0037da"];
        "0x0010dcc4" -> "0x0010dcee" [color="#0037da"];
}
