digraph code {
	graph [bgcolor=azure fontsize=8 fontname="Courier" splines="ortho"];
	node [fillcolor=gray style=filled shape=box];
	edge [arrowhead="normal"];
	"0x00104413" [URL="sym.get_quark_pdat_entry_data_by_desc/0x00104413", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="269: sym.get_quark_pdat_entry_data_by_desc (int32_t arg_8h, int32_t arg_ch, int32_t arg_10h);\l; var int32_t var_14h @ ebp-0x14\l; var int32_t var_10h @ ebp-0x10\l; var int32_t var_ch @ ebp-0xc\l; var int32_t var_4h @ ebp-0x4\l; arg int32_t arg_8h @ ebp+0x8\l; arg int32_t arg_ch @ ebp+0xc\l; arg int32_t arg_10h @ ebp+0x10\l0x00104413      push ebp\l0x00104414      mov ebp, esp\l0x00104416      push ebx\l0x00104417      sub esp, 0x14\l0x0010441a      call sym.__x86.get_pc_thunk.bx\l0x0010441f      add ebx, 0x1cbe1\l0x00104425      mov dword [var_ch], 0\l0x0010442c      mov dword [var_14h], 0xfff10000\l0x00104433      mov eax, dword [var_14h]\l0x00104436      sub esp, 4\l0x00104439      push 4                                                 ; 4\l0x0010443b      lea edx, [ebx - 0x8bcf]\l0x00104441      push edx\l0x00104442      push eax\l0x00104443      call sym.memcmp                                        ; int memcmp(const void *s1, const void *s2, size_t n)\l0x00104448      add esp, 0x10\l0x0010444b      test eax, eax\l0x0010444d      je 0x10446b\l"]
	"0x0010444f" [URL="sym.get_quark_pdat_entry_data_by_desc/0x0010444f", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x0010444f      sub esp, 0xc\l0x00104452      lea eax, [ebx - 0x8bca]\l0x00104458      push eax\l0x00104459      call sym.kprintf\l0x0010445e      add esp, 0x10\l0x00104461      mov eax, 0xffffffff                                    ; -1\l0x00104466      jmp 0x10451b\l"]
	"0x0010446b" [URL="sym.get_quark_pdat_entry_data_by_desc/0x0010446b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.get_quark_pdat_entry_data_by_desc @ 0x10444d\l0x0010446b      mov eax, dword [var_14h]\l0x0010446e      add eax, 0xc                                           ; 12\l0x00104471      mov dword [var_10h], eax\l0x00104474      jmp 0x104507\l"]
	"0x00104479" [URL="sym.get_quark_pdat_entry_data_by_desc/0x00104479", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.get_quark_pdat_entry_data_by_desc @ 0x104510\l0x00104479      mov eax, dword [var_10h]\l0x0010447c      add eax, 4\l0x0010447f      sub esp, 4\l0x00104482      push 0xa                                               ; 10\l0x00104484      push dword [arg_8h]\l0x00104487      push eax\l0x00104488      call sym.strncmp                                       ; int strncmp(const char *s1, const char *s2, size_t n)\l0x0010448d      add esp, 0x10\l0x00104490      test eax, eax\l0x00104492      jne 0x1044de\l"]
	"0x00104494" [URL="sym.get_quark_pdat_entry_data_by_desc/0x00104494", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00104494      mov eax, dword [arg_10h]\l0x00104497      sub esp, 4\l0x0010449a      push eax\l0x0010449b      push 0\l0x0010449d      push dword [arg_ch]\l0x001044a0      call sym.memset                                        ; void *memset(void *s, int c, size_t n)\l0x001044a5      add esp, 0x10\l0x001044a8      mov eax, dword [var_10h]\l0x001044ab      mov ax, word [eax + 2]\l0x001044af      xor edx, edx\l0x001044b1      mov dx, ax\l0x001044b4      mov eax, dword [arg_10h]\l0x001044b7      cmp eax, edx\l0x001044b9      jbe 0x1044bd\l"]
	"0x001044bb" [URL="sym.get_quark_pdat_entry_data_by_desc/0x001044bb", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x001044bb      mov eax, edx\l"]
	"0x001044bd" [URL="sym.get_quark_pdat_entry_data_by_desc/0x001044bd", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.get_quark_pdat_entry_data_by_desc @ 0x1044b9\l0x001044bd      mov dword [arg_10h], eax\l0x001044c0      mov eax, dword [arg_10h]\l0x001044c3      mov edx, dword [var_10h]\l0x001044c6      add edx, 0x10                                          ; 16\l0x001044c9      sub esp, 4\l0x001044cc      push eax\l0x001044cd      push edx\l0x001044ce      push dword [arg_ch]\l0x001044d1      call sym.memcpy                                        ; void *memcpy(void *s1, const void *s2, size_t n)\l0x001044d6      add esp, 0x10\l0x001044d9      mov eax, dword [arg_10h]\l0x001044dc      jmp 0x10451b\l"]
	"0x001044de" [URL="sym.get_quark_pdat_entry_data_by_desc/0x001044de", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.get_quark_pdat_entry_data_by_desc @ 0x104492\l0x001044de      mov eax, dword [var_10h]\l0x001044e1      mov ax, word [eax + 2]\l0x001044e5      and eax, 0xffff\l0x001044ea      add eax, 0x10                                          ; 16\l0x001044ed      add dword [var_10h], eax\l0x001044f0      mov eax, dword [var_10h]\l0x001044f3      mov ax, word [eax + 2]\l0x001044f7      xor edx, edx\l0x001044f9      mov dx, ax\l0x001044fc      mov eax, dword [var_ch]\l0x001044ff      add eax, edx\l0x00104501      add eax, 0x10                                          ; 16\l0x00104504      mov dword [var_ch], eax\l"]
	"0x00104507" [URL="sym.get_quark_pdat_entry_data_by_desc/0x00104507", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREF from sym.get_quark_pdat_entry_data_by_desc @ 0x104474\l0x00104507      mov eax, dword [var_14h]\l0x0010450a      mov eax, dword [eax + 4]\l0x0010450d      cmp dword [var_ch], eax\l0x00104510      jb 0x104479\l"]
	"0x00104516" [URL="sym.get_quark_pdat_entry_data_by_desc/0x00104516", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="0x00104516      mov eax, 0xffffffff                                    ; -1\l"]
	"0x0010451b" [URL="sym.get_quark_pdat_entry_data_by_desc/0x0010451b", fillcolor="#c19c00",color="#c19c00", fontname="Courier",label="; CODE XREFS from sym.get_quark_pdat_entry_data_by_desc @ 0x104466, 0x1044dc\l0x0010451b      mov ebx, dword [var_4h]\l0x0010451e      leave\l0x0010451f      ret\l"]
        "0x00104413" -> "0x0010446b" [color="#13a10e"];
        "0x00104413" -> "0x0010444f" [color="#c50f1f"];
        "0x0010444f" -> "0x0010451b" [color="#0037da"];
        "0x0010446b" -> "0x00104507" [color="#0037da"];
        "0x00104479" -> "0x001044de" [color="#13a10e"];
        "0x00104479" -> "0x00104494" [color="#c50f1f"];
        "0x00104494" -> "0x001044bd" [color="#13a10e"];
        "0x00104494" -> "0x001044bb" [color="#c50f1f"];
        "0x001044bb" -> "0x001044bd" [color="#0037da"];
        "0x001044bd" -> "0x0010451b" [color="#0037da"];
        "0x001044de" -> "0x00104507" [color="#0037da"];
        "0x00104507" -> "0x00104479" [color="#13a10e"];
        "0x00104507" -> "0x00104516" [color="#c50f1f"];
        "0x00104516" -> "0x0010451b" [color="#0037da"];
}
